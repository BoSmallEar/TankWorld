#include <stdio.h>
#include <inttypes.h>
#include "drivers/mss_spi/mss_spi.h"
#include "drivers/mss_uart/mss_uart.h"
#include "drivers/mss_gpio/mss_gpio.h"
#include "drivers/mss_ace/mss_ace.h"
#include "my_timer.h"

#define ADC_IR_WAIT 200
#define BUFFER_SIZE 1000
#define FORWARD_SPEED 80000
#define BACKWARD_SPEED 60000
#define TURN_SPEED 90000
#define H_ANGLE 125
#define V_ANGLE 25

uint16_t i;

ace_channel_handle_t adc_handler_2, adc_handler_3, adc_handler_4, adc_handler_5;

uint16_t adc_data_2, adc_data_3, adc_data_4, adc_data_5, adc_wait;
uint32_t adc_sum2 = 0, adc_sum3 = 0, adc_sum4 = 0, adc_sum5 = 0;
uint16_t adc_buffer2[BUFFER_SIZE], adc_buffer5[BUFFER_SIZE], adc_buffer3[BUFFER_SIZE], adc_buffer4[BUFFER_SIZE];

uint8_t message[1];

volatile uint32_t* pwm_h_addr = (uint32_t*)(0x40050000);
volatile uint32_t* pwm_v_addr = (uint32_t*)(0x40050100);
volatile uint32_t* motor_left_addr = (uint32_t*)(0x40050400);
volatile uint32_t* motor_right_addr = (uint32_t*)(0x40050500);
volatile uint32_t* fire_addr = (uint32_t*)(0x40050600);
volatile uint32_t* led_rg_addr = (uint32_t*)(0x40050700);

const uint32_t servo_h_initial = 75000;
const uint32_t servo_h_max_depression = 120000;
const uint32_t servo_h_max_elevation = 30000;

const uint32_t servo_v_initial = 75000;
const uint32_t servo_v_max_depression = 80000;
const uint32_t servo_v_max_elevation = 70000;

uint32_t v_angle, h_angle;

int reload;

void delay(uint32_t num);

void setMotorPin(int A1, int A2, int B1, int B2, int Aspeed, int Bspeed); // 0 means close and 1 means open !!!!!!

void setServoPin(int h, uint32_t h_value, int v, uint32_t v_value); // 1 means east and -1 means west

uint32_t reverseBit(uint32_t input);

void GPIO5_IRQHandler( void );

void GPIO8_IRQHandler( void );

int main()
{
	ACE_init();
	adc_handler_2 = ACE_get_channel_handle((const uint8_t *)"ADCDirectInput_2");
	adc_handler_3 = ACE_get_channel_handle((const uint8_t *)"ADCDirectInput_3");
	adc_handler_4 = ACE_get_channel_handle((const uint8_t *)"ADCDirectInput_4");
	adc_handler_5 = ACE_get_channel_handle((const uint8_t *)"ADCDirectInput_5");

	for(i = 0; i < 1000; i++){
	    adc_data_2 = ACE_get_ppe_sample(adc_handler_2);
	    adc_data_3 = ACE_get_ppe_sample(adc_handler_3);
	    adc_data_4 = ACE_get_ppe_sample(adc_handler_4);
	    adc_data_5 = ACE_get_ppe_sample(adc_handler_5);
	    adc_buffer2[i] = adc_data_2;
	    adc_buffer3[i] = adc_data_3;
	    adc_buffer4[i] = adc_data_4;
	    adc_buffer5[i] = adc_data_5;
	    adc_sum2 += adc_buffer2[i];
	}

	adc_wait = ADC_IR_WAIT;

	const uint8_t frame_size = 8;
	uint32_t initial_set[5] = {0x80, 0x42, 0x00, 0xFF, 0xFF};

	uint32_t command_set[9] = {0x80, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	uint32_t receive_set[9];
	uint32_t master_tx_frame;

	uint32_t base_orient_x, base_orient_y;
	uint32_t turrent_orient_h, turrent_orient_v;
	uint32_t fire;

	*led_rg_addr = (1 << 1) + 1;

	*pwm_h_addr = servo_h_initial;
	*pwm_v_addr = servo_v_initial;

	h_angle = servo_h_initial;
	v_angle = servo_v_initial;

	MYTIMER_init();
	MYTIMER_setOverflowVal(100000000);
	DELAY_init();

    MSS_UART_init( &g_mss_uart1, MSS_UART_57600_BAUD,
                   MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT );

	MSS_GPIO_init( );
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE ); // ps2 att
	MSS_GPIO_config( MSS_GPIO_1, MSS_GPIO_OUTPUT_MODE ); // l298n
	MSS_GPIO_config( MSS_GPIO_2, MSS_GPIO_OUTPUT_MODE ); // l298n
	MSS_GPIO_config( MSS_GPIO_3, MSS_GPIO_OUTPUT_MODE ); // l298n
	MSS_GPIO_config( MSS_GPIO_4, MSS_GPIO_OUTPUT_MODE ); // l298n
	MSS_GPIO_config( MSS_GPIO_5, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE ); // reload interrupt
	MSS_GPIO_config( MSS_GPIO_8, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE ); // fire interrupt
	MSS_GPIO_config( MSS_GPIO_9, MSS_GPIO_OUTPUT_MODE ); // laser

	MSS_GPIO_enable_irq( MSS_GPIO_5 );
	MSS_GPIO_enable_irq( MSS_GPIO_8 );

	*fire_addr = 0;
	MSS_GPIO_set_output(MSS_GPIO_9,1);

	reload = 0;

	MSS_GPIO_set_output(MSS_GPIO_0,1);
	setMotorPin(0, 0, 0, 0, 0, 0);

	MSS_SPI_init( &g_mss_spi1 );
	MSS_SPI_configure_master_mode
	(
		&g_mss_spi1,
		MSS_SPI_SLAVE_0,
		MSS_SPI_MODE3,
		MSS_SPI_PCLK_DIV_256,
		frame_size
	);

	MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

	MSS_GPIO_set_output(MSS_GPIO_0,0);
	for(i = 0; i < 5;i++){
		master_tx_frame = initial_set[i];
		receive_set[i] = MSS_SPI_transfer_frame( &g_mss_spi1, master_tx_frame );
		delay(2000);
	}
	MSS_GPIO_set_output(MSS_GPIO_0,1);
	delay(50000);

	while(1){
		message[0] = 0;
		MSS_UART_get_rx(&g_mss_uart1, message, sizeof(message));
		if(message[0] == 0x70){ // game over
			MSS_GPIO_set_output(MSS_GPIO_9,0);
			break;
		}

		adc_data_2 = ACE_get_ppe_sample(adc_handler_2);
		adc_data_3 = ACE_get_ppe_sample(adc_handler_3);
		adc_data_4 = ACE_get_ppe_sample(adc_handler_4);
		adc_data_5 = ACE_get_ppe_sample(adc_handler_5);

		//printf("%d %d %d %d\r\n",adc_data_2,adc_data_3,adc_data_4,adc_data_5);

		if(adc_wait == ADC_IR_WAIT){
			if(adc_data_2 < 200 || adc_data_3 < 200 || adc_data_4 < 200 || adc_data_5 < 200){
				message[0] = 0x62; // 0x61 for A and 0x62 for B
				MSS_UART_polled_tx_string( &g_mss_uart1, message);
				printf("HIT\r\n");
				//printf("%d %d %d %d\r\n",adc_data_2,adc_data_3,adc_data_4,adc_data_5);
				adc_wait--;
			}
		}
		else if(adc_wait > 0){
			adc_wait--;
		}
		else{
			adc_wait = ADC_IR_WAIT;
		}

		MSS_GPIO_set_output(MSS_GPIO_0,0);
		for(i = 0; i < 9;i++){
			master_tx_frame = command_set[i];
			receive_set[i] = MSS_SPI_transfer_frame( &g_mss_spi1, master_tx_frame );
			delay(2000);
		}
		MSS_GPIO_set_output(MSS_GPIO_0,1);

		delay(100000);

		if(receive_set[1] != 0xCE) continue;

		base_orient_x = (~reverseBit(receive_set[7]))&0xFF;
		base_orient_y = reverseBit(receive_set[8]);
		turrent_orient_h = (~reverseBit(receive_set[5]))&0xFF;
		turrent_orient_v = reverseBit(receive_set[6]);
		fire = (receive_set[4] >> 4) & 0xF;

		//printf("polled data: %02X %02X %02X %02X %02X %d\r\n", base_orient_x, base_orient_y, turrent_orient_h, turrent_orient_v, fire, h_angle);

		if(base_orient_x > 0x90){
			if(base_orient_y > 0x90){
				setMotorPin(0, 1, 0, 1, BACKWARD_SPEED, BACKWARD_SPEED); // southwest
			}
			else if(base_orient_y < 0x6E){
				setMotorPin(1, 0, 1, 0, FORWARD_SPEED, FORWARD_SPEED); // northwest
			}
			else{
				setMotorPin(0, 1, 1, 0, TURN_SPEED, TURN_SPEED); // west
			}
		}
		else if(base_orient_x < 0x6E){
			if(base_orient_y > 0x90){
				setMotorPin(0, 1, 0, 1, BACKWARD_SPEED, BACKWARD_SPEED); // southeast
			}
			else if(base_orient_y < 0x6E){
				setMotorPin(1, 0, 1, 0, FORWARD_SPEED, FORWARD_SPEED); // northeast
			}
			else{
				setMotorPin(1, 0, 0, 1, TURN_SPEED, TURN_SPEED); // east
			}
		}
		else{
			if(base_orient_y > 0x90){
				setMotorPin(0, 1, 0, 1, BACKWARD_SPEED, BACKWARD_SPEED); // south
			}
			else if(base_orient_y < 0x6E){
				setMotorPin(1, 0, 1, 0, FORWARD_SPEED, FORWARD_SPEED); // north
			}
			else{
				setMotorPin(0, 0, 0, 0, 0, 0); // stop
			}
		}

		if(turrent_orient_h > 0x90){
			if(turrent_orient_v > 0x90){
				setServoPin(-1,turrent_orient_h,-1,turrent_orient_v); // southwest
			}
			else if(turrent_orient_v < 0x6E){
				setServoPin(-1,turrent_orient_h,1,turrent_orient_v); // northwest
			}
			else{
				setServoPin(-1,turrent_orient_h,0,turrent_orient_v); // west
			}
		}
		else if(turrent_orient_h < 0x6E){
			if(turrent_orient_v > 0x90){
				setServoPin(1,turrent_orient_h,-1,turrent_orient_v); // southeast
			}
			else if(turrent_orient_v < 0x6E){
				setServoPin(1,turrent_orient_h,1,turrent_orient_v); // northeast
			}
			else{
				setServoPin(1,turrent_orient_h,0,turrent_orient_v); // east
			}
		}
		else{
			if(turrent_orient_v > 0x90){
				setServoPin(0,turrent_orient_h,-1,turrent_orient_v); // south
			}
			else if(turrent_orient_v < 0x6E){
				setServoPin(0,turrent_orient_h,1,turrent_orient_v); // north
			}
			else{
				setServoPin(0,turrent_orient_h,0,turrent_orient_v); // stop
			}
		}

		if(fire == 0xB && !reload){
			*fire_addr = 1;
			*led_rg_addr = (0 << 1) + 0;
			reload = 1;
			message[0] = 0x67; // 0x66 for A and 0x67 for B
			MSS_UART_polled_tx_string( &g_mss_uart1, message);
			MYTIMER_enable();
			printf("FIRE\r\n");
		}
	}

	MSS_GPIO_set_output(MSS_GPIO_0,1);

	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

	setMotorPin(0, 0, 0, 0, 0, 0);
	setServoPin(0, 0, 0, 0);
	// game over led

	return 0;
}

void delay(uint32_t num){
	DELAY_setOverflowVal(num);
	DELAY_enable();
	while(DELAY_getCounterVal() < num * 99 / 100){}
	DELAY_disable();
}

void setMotorPin(int A1, int A2, int B1, int B2, int Aspeed, int Bspeed){
	MSS_GPIO_set_output(MSS_GPIO_1, A1);
	MSS_GPIO_set_output(MSS_GPIO_2, A2);
	MSS_GPIO_set_output(MSS_GPIO_3, B1);
	MSS_GPIO_set_output(MSS_GPIO_4, B2);
	*motor_left_addr = Aspeed;
	*motor_right_addr = Bspeed;
}

uint32_t reverseBit(uint32_t input){
	uint32_t res = 0, i;
	for(i = 0; i < 8; i++){
		res <<= 1;
		if((input & 1) == 1){
			res ^= 1;
		}
		input >>= 1;
	}
	return res;
}

void GPIO5_IRQHandler( void ){
	printf("FINISH\r\n");
	MYTIMER_disable();
	reload = 0;
	*led_rg_addr = (1 << 1) + 1;
	MSS_GPIO_clear_irq( MSS_GPIO_5 );
}

void GPIO8_IRQHandler( void ){
	printf("FIRE FINISH\r\n");
	*fire_addr = 0;
	MSS_GPIO_clear_irq( MSS_GPIO_8 );
}

void setServoPin(int h, uint32_t h_value, int v, uint32_t v_value){
	switch(h){
	case 1:
		if (h_angle < servo_h_max_depression) {
			h_angle += H_ANGLE * (0x7F - h_value) / 0x7F;
			*pwm_h_addr = h_angle;
		}
		break;
	case -1:
		if (h_angle > servo_h_max_elevation) {
			h_angle -= H_ANGLE * (h_value - 0x7F) / (0xFF - 0x7F);
			*pwm_h_addr = h_angle;
		}
		break;
	default:
		*pwm_h_addr = h_angle;
		break;
	}

	switch(v){
	case 1:
		if (v_angle < servo_v_max_depression) {
			v_angle += V_ANGLE * (0x7F - v_value) / 0x7F;
			*pwm_v_addr = v_angle;
		}
		break;
	case -1:
		if (v_angle > servo_v_max_elevation) {
			v_angle -= V_ANGLE * (v_value - 0x7F) / (0xFF - 0x7F);
			*pwm_v_addr = v_angle;
		}
		break;
	default:
		*pwm_v_addr = v_angle;
		break;
	}
}
