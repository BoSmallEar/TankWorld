
ps2_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         00000470  00000000  60000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002230  00000470  60000470  00008470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000074  20000000  600026a0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000020dc  20000074  60002714  00010074  2**2
                  ALLOC
  4 .comment      000001d9  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000608  00000000  00000000  0001024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000012f8  00000000  00000000  00010855  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000979a  00000000  00000000  00011b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001235  00000000  00000000  0001b2e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000277b  00000000  00000000  0001c51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001000  00000000  00000000  0001ec98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003f64  00000000  00000000  0001fc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002902  00000000  00000000  00023bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .ARM.attributes 00000025  00000000  00000000  000264fe  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 000011a8  00000000  00000000  00026523  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00000000 <__vector_table_vma_base_address>:
 * Close a file.
 */
int _close(int file)
{
    return -1;
}
   0:	20010000 	.word	0x20010000

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( pbuff != ( (uint8_t *)0 ) );
    ASSERT( tx_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
   4:	00000299 	.word	0x00000299
   8:	00000309 	.word	0x00000309
    uint8_t irq_mask
)
{
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
   c:	0000030b 	.word	0x0000030b
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
  10:	0000030d 	.word	0x0000030d
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( pbuff != ((uint8_t *)0) );
    ASSERT( tx_size > 0U );

    if ( ( tx_size > 0U ) && ( pbuff != ((uint8_t *)0) ) &&
  14:	0000030f 	.word	0x0000030f
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        if ( ( TX_COMPLETE == this_uart->tx_buff_size ) &&
  18:	00000311 	.word	0x00000311
	...
  2c:	00000313 	.word	0x00000313
         * bit 3 - Modem Status Interrupt
         */
        this_uart->hw_reg->IER &= ( (uint8_t)~irq_mask );

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
  30:	00000315 	.word	0x00000315
        this_uart->tx_buffer = pbuff;
        this_uart->tx_buff_size = tx_size;
        this_uart->tx_idx = (uint16_t)0;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
  34:	00000000 	.word	0x00000000
         * bit 0 - Receive Data Available Interrupt
         * bit 1 - Transmitter Holding  Register Empty Interrupt
         * bit 2 - Receiver Line Status Interrupt
         * bit 3 - Modem Status Interrupt
         */
        this_uart->hw_reg->IER |= irq_mask;
  38:	00000317 	.word	0x00000317

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
        ( handler != INVALID_IRQ_HANDLER) &&
        ( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL) )
    {
        this_uart->rx_handler = handler;
  3c:	00000319 	.word	0x00000319
        /* Clear RX FIFO; Enable TXRDY and RXRDY for PDMA */
        this_uart->hw_reg->FCR = (uint8_t)(FCR_TRIG_LEVEL_MASK & (uint8_t)trigger_level) |
                              FCR_CLEAR_RX_FIFO_MASK | FCR_ENABLE_TXRDY_RXRDY_MASK;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
  40:	0000031b 	.word	0x0000031b
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
  44:	0000031d 	.word	0x0000031d

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
  48:	0000031f 	.word	0x0000031f
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
  4c:	00000321 	.word	0x00000321

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
  50:	00000323 	.word	0x00000323
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
  54:	00000325 	.word	0x00000325

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
  58:	00000327 	.word	0x00000327
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
  5c:	00000329 	.word	0x00000329
            if ( tx_size < TX_FIFO_SIZE )
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
  60:	0000032b 	.word	0x0000032b
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  64:	0000032d 	.word	0x0000032d

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );

        /* assign default handler for data transfer */
        this_uart->tx_handler = default_tx_handler;
  68:	00001151 	.word	0x00001151
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
            {

                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = tx_buffer[size_sent];
  6c:	00001181 	.word	0x00001181
            if ( tx_size < TX_FIFO_SIZE )
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
  70:	0000184d 	.word	0x0000184d

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
  74:	0000187d 	.word	0x0000187d
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
            {

                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = tx_buffer[size_sent];
  78:	00000337 	.word	0x00000337

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
  7c:	00000339 	.word	0x00000339
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
  80:	0000033b 	.word	0x0000033b
  84:	0000033d 	.word	0x0000033d
            if ( tx_size < TX_FIFO_SIZE )
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
  88:	0000033f 	.word	0x0000033f
    {
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
        if(0u == rx_fifo_empty)
        {
            /* Process received byte. */
            rx_raw = this_spi->hw_reg->RX_DATA;
  8c:	00000341 	.word	0x00000341
            if(transfer_idx >= cmd_byte_size)
  90:	00000343 	.word	0x00000343
    {
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
        if(0u == rx_fifo_empty)
        {
            /* Process received byte. */
            rx_raw = this_spi->hw_reg->RX_DATA;
  94:	00000345 	.word	0x00000345
            if(transfer_idx >= cmd_byte_size)
            {
                if(rx_idx < rd_byte_size)
  98:	00000347 	.word	0x00000347
                {
                    rd_buffer[rx_idx] = (uint8_t)rx_raw;   
  9c:	00000349 	.word	0x00000349

    /* Use the frame counter to control how often receive interrupts are generated. */
    frame_count = RX_IRQ_THRESHOLD;
    
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK) |
  a0:	0000034b 	.word	0x0000034b
	...
        }

        tx_fifo_full = this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK;
        if(0u == tx_fifo_full)
        {
            if(transit < RX_FIFO_SIZE)
  bc:	0000034d 	.word	0x0000034d
            {
                /* Send another byte. */
                if(tx_idx < cmd_byte_size)
                {
                    this_spi->hw_reg->TX_DATA = cmd_buffer[tx_idx];
  c0:	0000034f 	.word	0x0000034f
                                (frame_count << TXRXDFCOUNT_SHIFT);
    this_spi->hw_reg->TXRXDF_SIZE = MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE;
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    
    /* Load the transmit FIFO. */
    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) && (0u == done))
  c4:	00000351 	.word	0x00000351
                    ++tx_idx;
                    ++transit;
                }
                else
                {
                    if(tx_idx < transfer_size)
  c8:	00000353 	.word	0x00000353
                    {
                        this_spi->hw_reg->TX_DATA = 0x00u;
                        ++tx_idx;
  cc:	00000355 	.word	0x00000355
                        ++transit;
  d0:	00000357 	.word	0x00000357
                }
                else
                {
                    if(tx_idx < transfer_size)
                    {
                        this_spi->hw_reg->TX_DATA = 0x00u;
  d4:	00000601 	.word	0x00000601
                        ++tx_idx;
  d8:	0000035b 	.word	0x0000035b
        }
    }
    /* Perform the remainder of the transfer by sending a byte every time a byte
     * has been received. This should ensure that no Rx overflow can happen in
     * case of an interrupt occurs during this function. */
    while(transfer_idx < transfer_size)
  dc:	0000035d 	.word	0x0000035d
                    }
                }
            }
        }
    }
}
  e0:	000005ed 	.word	0x000005ed
  e4:	00000361 	.word	0x00000361
        ++tx_idx;
        ++transit;
    }
    else
    {
        if(tx_idx < transfer_size)
  e8:	00000363 	.word	0x00000363
        {
            this_spi->hw_reg->TX_DATA = 0x00u;
  ec:	00000365 	.word	0x00000365
    
    /* Compute number of bytes to transfer. */
    transfer_size = cmd_byte_size + rd_byte_size;
    
    /* Adjust to 1 byte transfer to cater for DMA transfers. */
    if(0u == transfer_size)
  f0:	00000367 	.word	0x00000367
    {
        frame_count = transfer_size;
    }

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
  f4:	00000369 	.word	0x00000369

    if(tx_buff_size > 0u)
    {
        /* Clear and enable TX interrupt. Also disable autofill */
        this_spi->hw_reg->COMMAND &= ~(uint32_t)AUTOFILL_MASK;
        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
  f8:	0000036b 	.word	0x0000036b

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
  fc:	0000036d 	.word	0x0000036d

    if(tx_buff_size > 0u)
    {
        /* Clear and enable TX interrupt. Also disable autofill */
        this_spi->hw_reg->COMMAND &= ~(uint32_t)AUTOFILL_MASK;
        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
 100:	0000036f 	.word	0x0000036f
    
    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    if(rx_overflow)
    {
         recover_from_rx_overflow(this_spi);
 104:	00000371 	.word	0x00000371
 108:	00000373 	.word	0x00000373
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 10c:	00000375 	.word	0x00000375
 110:	00000377 	.word	0x00000377
     * the next transaction.
     *
     * Make sure to clear any pending ssend ints otherwise we will trigger
     * an immediate interrupt.
     */
    this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
 114:	00000379 	.word	0x00000379
    this_spi->hw_reg->CONTROL2 |= C2_ENABLE_SSEND_IRQ_MASK;
 118:	0000037b 	.word	0x0000037b
 11c:	0000037d 	.word	0x0000037d
    
    /* Clear down ints to avoid stale ints triggering when we enable them below */
    this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK | RXOVFLOW_IRQ_MASK |
 120:	0000037f 	.word	0x0000037f
 124:	00000381 	.word	0x00000381
 128:	00000383 	.word	0x00000383
                                  RXDONE_IRQ_MASK;
    /*
     * Enable TX underrun and RX overflow interrupts to improve error
     * recovery and enable Rx interrupt.
     */
    this_spi->hw_reg->CONTROL |= CTRL_RX_IRQ_EN_MASK | CTRL_URUN_IRQ_EN_MASK |
 12c:	00000385 	.word	0x00000385
 130:	00000387 	.word	0x00000387
 134:	00000389 	.word	0x00000389
 138:	0000038b 	.word	0x0000038b
                                 CTRL_OVFLOW_IRQ_EN_MASK;

    NVIC_EnableIRQ(this_spi->irqn);
}
 13c:	0000038d 	.word	0x0000038d
 140:	0000038f 	.word	0x0000038f
        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
        this_spi->hw_reg->CONTROL |= CTRL_TX_IRQ_EN_MASK;
    }
    else
    {
        this_spi->hw_reg->COMMAND |= AUTOFILL_MASK;
 144:	00000391 	.word	0x00000391
 148:	00000393 	.word	0x00000393
    }
    
    /* Ensure command interrupt disabled if no handler */
    if(0u == this_spi->cmd_handler)
 14c:	00000395 	.word	0x00000395
    {
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
 150:	00000397 	.word	0x00000397
 154:	00000399 	.word	0x00000399
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);

    /* Recover from receive overflow if needs be */
    if(0u != (this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK))
    {
         recover_from_rx_overflow(this_spi);
 158:	0000039b 	.word	0x0000039b
 15c:	0000039d 	.word	0x0000039d
 160:	0000039f 	.word	0x0000039f
 164:	000003a1 	.word	0x000003a1
 168:	000003a3 	.word	0x000003a3
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_BLOCK;

    /* Set cmd_done correctly to ensure 0 padding works. */
    if(0u == this_spi->cmd_handler)
    {
        this_spi->cmd_done = 1u;
 16c:	000003a5 	.word	0x000003a5
 170:	000003a7 	.word	0x000003a7
 174:	000003a9 	.word	0x000003a9
 178:	000003ab 	.word	0x000003ab
 17c:	000003ad 	.word	0x000003ad
 180:	000003af 	.word	0x000003af
 184:	000003b1 	.word	0x000003b1
 188:	000003b3 	.word	0x000003b3
 18c:	000003b5 	.word	0x000003b5
 190:	000003b7 	.word	0x000003b7
 194:	000003b9 	.word	0x000003b9
 198:	000003bb 	.word	0x000003bb
 19c:	000003bd 	.word	0x000003bd
 1a0:	000003bf 	.word	0x000003bf
 1a4:	000003c1 	.word	0x000003c1
 1a8:	000003c3 	.word	0x000003c3
 1ac:	000003c5 	.word	0x000003c5
 1b0:	000003c7 	.word	0x000003c7
 1b4:	000003c9 	.word	0x000003c9
 1b8:	000003cb 	.word	0x000003cb
 1bc:	000003cd 	.word	0x000003cd
 1c0:	000003cf 	.word	0x000003cf
 1c4:	000003d1 	.word	0x000003d1
 1c8:	000003d3 	.word	0x000003d3
 1cc:	000003d5 	.word	0x000003d5
 1d0:	000003d7 	.word	0x000003d7
 1d4:	000003d9 	.word	0x000003d9
 1d8:	000003db 	.word	0x000003db
 1dc:	000003dd 	.word	0x000003dd
 1e0:	000003df 	.word	0x000003df
 1e4:	000003e1 	.word	0x000003e1
 1e8:	000003e3 	.word	0x000003e3
 1ec:	000003e5 	.word	0x000003e5
 1f0:	000003e7 	.word	0x000003e7
 1f4:	000003e9 	.word	0x000003e9
 1f8:	000003eb 	.word	0x000003eb
 1fc:	000003ed 	.word	0x000003ed
 200:	000003ef 	.word	0x000003ef
 204:	000003f1 	.word	0x000003f1
 208:	000003f3 	.word	0x000003f3
 20c:	000003f5 	.word	0x000003f5
 210:	000003f7 	.word	0x000003f7
 214:	000003f9 	.word	0x000003f9
 218:	00001ead 	.word	0x00001ead
 21c:	00001ecd 	.word	0x00001ecd
 220:	00001eed 	.word	0x00001eed
 224:	00001f0d 	.word	0x00001f0d
 228:	00001f2d 	.word	0x00001f2d
 22c:	00001f4d 	.word	0x00001f4d
 230:	00001f6d 	.word	0x00001f6d
 234:	00001f8d 	.word	0x00001f8d
 238:	00001fad 	.word	0x00001fad
 23c:	00001fcd 	.word	0x00001fcd
 240:	00001fed 	.word	0x00001fed
 244:	0000200d 	.word	0x0000200d
 248:	0000202d 	.word	0x0000202d
 24c:	0000204d 	.word	0x0000204d
 250:	0000206d 	.word	0x0000206d
 254:	0000208d 	.word	0x0000208d
 258:	000020ad 	.word	0x000020ad
 25c:	000020cd 	.word	0x000020cd
 260:	000020ed 	.word	0x000020ed
 264:	0000210d 	.word	0x0000210d
 268:	0000212d 	.word	0x0000212d
 26c:	0000214d 	.word	0x0000214d
 270:	0000216d 	.word	0x0000216d
 274:	0000218d 	.word	0x0000218d
 278:	000021ad 	.word	0x000021ad
 27c:	000021cd 	.word	0x000021cd
 280:	000021ed 	.word	0x000021ed
 284:	0000220d 	.word	0x0000220d
 288:	0000222d 	.word	0x0000222d
 28c:	0000224d 	.word	0x0000224d
 290:	0000226d 	.word	0x0000226d
 294:	0000228d 	.word	0x0000228d

00000298 <Reset_Handler>:
 298:	4868      	ldr	r0, [pc, #416]	; (43c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
 29a:	4780      	blx	r0
 29c:	4868      	ldr	r0, [pc, #416]	; (440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
 29e:	2800      	cmp	r0, #0
 2a0:	d10b      	bne.n	2ba <copy_data>
 2a2:	4868      	ldr	r0, [pc, #416]	; (444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
 2a4:	4968      	ldr	r1, [pc, #416]	; (448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
 2a6:	4a69      	ldr	r2, [pc, #420]	; (44c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
 2a8:	4288      	cmp	r0, r1
 2aa:	d006      	beq.n	2ba <copy_data>

000002ac <copy_code_loop>:
 2ac:	4291      	cmp	r1, r2
 2ae:	bf1c      	itt	ne
 2b0:	f850 3b04 	ldrne.w	r3, [r0], #4
 2b4:	f841 3b04 	strne.w	r3, [r1], #4
 2b8:	d1f8      	bne.n	2ac <copy_code_loop>

000002ba <copy_data>:
 2ba:	4865      	ldr	r0, [pc, #404]	; (450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
 2bc:	4965      	ldr	r1, [pc, #404]	; (454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
 2be:	4a66      	ldr	r2, [pc, #408]	; (458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
 2c0:	4288      	cmp	r0, r1
 2c2:	d006      	beq.n	2d2 <clear_bss>

000002c4 <copy_data_loop>:
 2c4:	4291      	cmp	r1, r2
 2c6:	bf1c      	itt	ne
 2c8:	f850 3b04 	ldrne.w	r3, [r0], #4
 2cc:	f841 3b04 	strne.w	r3, [r1], #4
 2d0:	d1f8      	bne.n	2c4 <copy_data_loop>

000002d2 <clear_bss>:
 2d2:	4862      	ldr	r0, [pc, #392]	; (45c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
 2d4:	4962      	ldr	r1, [pc, #392]	; (460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
 2d6:	4a63      	ldr	r2, [pc, #396]	; (464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

000002d8 <clear_bss_loop>:
 2d8:	4291      	cmp	r1, r2
 2da:	bf18      	it	ne
 2dc:	f841 0b04 	strne.w	r0, [r1], #4
 2e0:	d1fa      	bne.n	2d8 <clear_bss_loop>
	...

000002f0 <call_glob_ctor>:
 2f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
 2f4:	f20f 0e03 	addw	lr, pc, #3
 2f8:	4700      	bx	r0

000002fa <branch_to_main>:
 2fa:	f04f 0000 	mov.w	r0, #0
 2fe:	f04f 0100 	mov.w	r1, #0
 302:	f8df f168 	ldr.w	pc, [pc, #360]	; 46c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

00000306 <ExitLoop>:
 306:	e7fe      	b.n	306 <ExitLoop>

00000308 <NMI_Handler>:
 308:	e7fe      	b.n	308 <NMI_Handler>

0000030a <HardFault_Handler>:
 30a:	e7fe      	b.n	30a <HardFault_Handler>

0000030c <MemManage_Handler>:
 30c:	e7fe      	b.n	30c <MemManage_Handler>

0000030e <BusFault_Handler>:
 30e:	e7fe      	b.n	30e <BusFault_Handler>

00000310 <UsageFault_Handler>:
 310:	e7fe      	b.n	310 <UsageFault_Handler>

00000312 <SVC_Handler>:
 312:	e7fe      	b.n	312 <SVC_Handler>

00000314 <DebugMon_Handler>:
 314:	e7fe      	b.n	314 <DebugMon_Handler>

00000316 <PendSV_Handler>:
 316:	e7fe      	b.n	316 <PendSV_Handler>

00000318 <SysTick_Handler>:
 318:	e7fe      	b.n	318 <SysTick_Handler>

0000031a <WdogWakeup_IRQHandler>:
 31a:	e7fe      	b.n	31a <WdogWakeup_IRQHandler>

0000031c <BrownOut_1_5V_IRQHandler>:
 31c:	e7fe      	b.n	31c <BrownOut_1_5V_IRQHandler>

0000031e <BrownOut_3_3V_IRQHandler>:
 31e:	e7fe      	b.n	31e <BrownOut_3_3V_IRQHandler>

00000320 <RTC_Match_IRQHandler>:
 320:	e7fe      	b.n	320 <RTC_Match_IRQHandler>

00000322 <RTCIF_Pub_IRQHandler>:
 322:	e7fe      	b.n	322 <RTCIF_Pub_IRQHandler>

00000324 <EthernetMAC_IRQHandler>:
 324:	e7fe      	b.n	324 <EthernetMAC_IRQHandler>

00000326 <IAP_IRQHandler>:
 326:	e7fe      	b.n	326 <IAP_IRQHandler>

00000328 <ENVM0_IRQHandler>:
 328:	e7fe      	b.n	328 <ENVM0_IRQHandler>

0000032a <ENVM1_IRQHandler>:
 32a:	e7fe      	b.n	32a <ENVM1_IRQHandler>

0000032c <DMA_IRQHandler>:
 32c:	e7fe      	b.n	32c <DMA_IRQHandler>
 32e:	e7fe      	b.n	32e <DMA_IRQHandler+0x2>
 330:	e7fe      	b.n	330 <DMA_IRQHandler+0x4>
 332:	e7fe      	b.n	332 <DMA_IRQHandler+0x6>
 334:	e7fe      	b.n	334 <DMA_IRQHandler+0x8>

00000336 <I2C0_IRQHandler>:
 336:	e7fe      	b.n	336 <I2C0_IRQHandler>

00000338 <I2C0_SMBAlert_IRQHandler>:
 338:	e7fe      	b.n	338 <I2C0_SMBAlert_IRQHandler>

0000033a <I2C0_SMBus_IRQHandler>:
 33a:	e7fe      	b.n	33a <I2C0_SMBus_IRQHandler>

0000033c <I2C1_IRQHandler>:
 33c:	e7fe      	b.n	33c <I2C1_IRQHandler>

0000033e <I2C1_SMBAlert_IRQHandler>:
 33e:	e7fe      	b.n	33e <I2C1_SMBAlert_IRQHandler>

00000340 <I2C1_SMBus_IRQHandler>:
 340:	e7fe      	b.n	340 <I2C1_SMBus_IRQHandler>

00000342 <Timer1_IRQHandler>:
 342:	e7fe      	b.n	342 <Timer1_IRQHandler>

00000344 <Timer2_IRQHandler>:
 344:	e7fe      	b.n	344 <Timer2_IRQHandler>

00000346 <PLL_Lock_IRQHandler>:
 346:	e7fe      	b.n	346 <PLL_Lock_IRQHandler>

00000348 <PLL_LockLost_IRQHandler>:
 348:	e7fe      	b.n	348 <PLL_LockLost_IRQHandler>

0000034a <CommError_IRQHandler>:
 34a:	e7fe      	b.n	34a <CommError_IRQHandler>

0000034c <Fabric_IRQHandler>:
 34c:	e7fe      	b.n	34c <Fabric_IRQHandler>

0000034e <GPIO0_IRQHandler>:
 34e:	e7fe      	b.n	34e <GPIO0_IRQHandler>

00000350 <GPIO1_IRQHandler>:
 350:	e7fe      	b.n	350 <GPIO1_IRQHandler>

00000352 <GPIO2_IRQHandler>:
 352:	e7fe      	b.n	352 <GPIO2_IRQHandler>

00000354 <GPIO3_IRQHandler>:
 354:	e7fe      	b.n	354 <GPIO3_IRQHandler>

00000356 <GPIO4_IRQHandler>:
 356:	e7fe      	b.n	356 <GPIO4_IRQHandler>
 358:	e7fe      	b.n	358 <GPIO4_IRQHandler+0x2>

0000035a <GPIO6_IRQHandler>:
 35a:	e7fe      	b.n	35a <GPIO6_IRQHandler>

0000035c <GPIO7_IRQHandler>:
 35c:	e7fe      	b.n	35c <GPIO7_IRQHandler>
 35e:	e7fe      	b.n	35e <GPIO7_IRQHandler+0x2>

00000360 <GPIO9_IRQHandler>:
 360:	e7fe      	b.n	360 <GPIO9_IRQHandler>

00000362 <GPIO10_IRQHandler>:
 362:	e7fe      	b.n	362 <GPIO10_IRQHandler>

00000364 <GPIO11_IRQHandler>:
 364:	e7fe      	b.n	364 <GPIO11_IRQHandler>

00000366 <GPIO12_IRQHandler>:
 366:	e7fe      	b.n	366 <GPIO12_IRQHandler>

00000368 <GPIO13_IRQHandler>:
 368:	e7fe      	b.n	368 <GPIO13_IRQHandler>

0000036a <GPIO14_IRQHandler>:
 36a:	e7fe      	b.n	36a <GPIO14_IRQHandler>

0000036c <GPIO15_IRQHandler>:
 36c:	e7fe      	b.n	36c <GPIO15_IRQHandler>

0000036e <GPIO16_IRQHandler>:
 36e:	e7fe      	b.n	36e <GPIO16_IRQHandler>

00000370 <GPIO17_IRQHandler>:
 370:	e7fe      	b.n	370 <GPIO17_IRQHandler>

00000372 <GPIO18_IRQHandler>:
 372:	e7fe      	b.n	372 <GPIO18_IRQHandler>

00000374 <GPIO19_IRQHandler>:
 374:	e7fe      	b.n	374 <GPIO19_IRQHandler>

00000376 <GPIO20_IRQHandler>:
 376:	e7fe      	b.n	376 <GPIO20_IRQHandler>

00000378 <GPIO21_IRQHandler>:
 378:	e7fe      	b.n	378 <GPIO21_IRQHandler>

0000037a <GPIO22_IRQHandler>:
 37a:	e7fe      	b.n	37a <GPIO22_IRQHandler>

0000037c <GPIO23_IRQHandler>:
 37c:	e7fe      	b.n	37c <GPIO23_IRQHandler>

0000037e <GPIO24_IRQHandler>:
 37e:	e7fe      	b.n	37e <GPIO24_IRQHandler>

00000380 <GPIO25_IRQHandler>:
 380:	e7fe      	b.n	380 <GPIO25_IRQHandler>

00000382 <GPIO26_IRQHandler>:
 382:	e7fe      	b.n	382 <GPIO26_IRQHandler>

00000384 <GPIO27_IRQHandler>:
 384:	e7fe      	b.n	384 <GPIO27_IRQHandler>

00000386 <GPIO28_IRQHandler>:
 386:	e7fe      	b.n	386 <GPIO28_IRQHandler>

00000388 <GPIO29_IRQHandler>:
 388:	e7fe      	b.n	388 <GPIO29_IRQHandler>

0000038a <GPIO30_IRQHandler>:
 38a:	e7fe      	b.n	38a <GPIO30_IRQHandler>

0000038c <GPIO31_IRQHandler>:
 38c:	e7fe      	b.n	38c <GPIO31_IRQHandler>

0000038e <ACE_PC0_Flag0_IRQHandler>:
 38e:	e7fe      	b.n	38e <ACE_PC0_Flag0_IRQHandler>

00000390 <ACE_PC0_Flag1_IRQHandler>:
 390:	e7fe      	b.n	390 <ACE_PC0_Flag1_IRQHandler>

00000392 <ACE_PC0_Flag2_IRQHandler>:
 392:	e7fe      	b.n	392 <ACE_PC0_Flag2_IRQHandler>

00000394 <ACE_PC0_Flag3_IRQHandler>:
 394:	e7fe      	b.n	394 <ACE_PC0_Flag3_IRQHandler>

00000396 <ACE_PC1_Flag0_IRQHandler>:
 396:	e7fe      	b.n	396 <ACE_PC1_Flag0_IRQHandler>

00000398 <ACE_PC1_Flag1_IRQHandler>:
 398:	e7fe      	b.n	398 <ACE_PC1_Flag1_IRQHandler>

0000039a <ACE_PC1_Flag2_IRQHandler>:
 39a:	e7fe      	b.n	39a <ACE_PC1_Flag2_IRQHandler>

0000039c <ACE_PC1_Flag3_IRQHandler>:
 39c:	e7fe      	b.n	39c <ACE_PC1_Flag3_IRQHandler>

0000039e <ACE_PC2_Flag0_IRQHandler>:
 39e:	e7fe      	b.n	39e <ACE_PC2_Flag0_IRQHandler>

000003a0 <ACE_PC2_Flag1_IRQHandler>:
 3a0:	e7fe      	b.n	3a0 <ACE_PC2_Flag1_IRQHandler>

000003a2 <ACE_PC2_Flag2_IRQHandler>:
 3a2:	e7fe      	b.n	3a2 <ACE_PC2_Flag2_IRQHandler>

000003a4 <ACE_PC2_Flag3_IRQHandler>:
 3a4:	e7fe      	b.n	3a4 <ACE_PC2_Flag3_IRQHandler>

000003a6 <ACE_ADC0_DataValid_IRQHandler>:
 3a6:	e7fe      	b.n	3a6 <ACE_ADC0_DataValid_IRQHandler>

000003a8 <ACE_ADC1_DataValid_IRQHandler>:
 3a8:	e7fe      	b.n	3a8 <ACE_ADC1_DataValid_IRQHandler>

000003aa <ACE_ADC2_DataValid_IRQHandler>:
 3aa:	e7fe      	b.n	3aa <ACE_ADC2_DataValid_IRQHandler>

000003ac <ACE_ADC0_CalDone_IRQHandler>:
 3ac:	e7fe      	b.n	3ac <ACE_ADC0_CalDone_IRQHandler>

000003ae <ACE_ADC1_CalDone_IRQHandler>:
 3ae:	e7fe      	b.n	3ae <ACE_ADC1_CalDone_IRQHandler>

000003b0 <ACE_ADC2_CalDone_IRQHandler>:
 3b0:	e7fe      	b.n	3b0 <ACE_ADC2_CalDone_IRQHandler>

000003b2 <ACE_ADC0_CalStart_IRQHandler>:
 3b2:	e7fe      	b.n	3b2 <ACE_ADC0_CalStart_IRQHandler>

000003b4 <ACE_ADC1_CalStart_IRQHandler>:
 3b4:	e7fe      	b.n	3b4 <ACE_ADC1_CalStart_IRQHandler>

000003b6 <ACE_ADC2_CalStart_IRQHandler>:
 3b6:	e7fe      	b.n	3b6 <ACE_ADC2_CalStart_IRQHandler>

000003b8 <ACE_Comp0_Fall_IRQHandler>:
 3b8:	e7fe      	b.n	3b8 <ACE_Comp0_Fall_IRQHandler>

000003ba <ACE_Comp1_Fall_IRQHandler>:
 3ba:	e7fe      	b.n	3ba <ACE_Comp1_Fall_IRQHandler>

000003bc <ACE_Comp2_Fall_IRQHandler>:
 3bc:	e7fe      	b.n	3bc <ACE_Comp2_Fall_IRQHandler>

000003be <ACE_Comp3_Fall_IRQHandler>:
 3be:	e7fe      	b.n	3be <ACE_Comp3_Fall_IRQHandler>

000003c0 <ACE_Comp4_Fall_IRQHandler>:
 3c0:	e7fe      	b.n	3c0 <ACE_Comp4_Fall_IRQHandler>

000003c2 <ACE_Comp5_Fall_IRQHandler>:
 3c2:	e7fe      	b.n	3c2 <ACE_Comp5_Fall_IRQHandler>

000003c4 <ACE_Comp6_Fall_IRQHandler>:
 3c4:	e7fe      	b.n	3c4 <ACE_Comp6_Fall_IRQHandler>

000003c6 <ACE_Comp7_Fall_IRQHandler>:
 3c6:	e7fe      	b.n	3c6 <ACE_Comp7_Fall_IRQHandler>

000003c8 <ACE_Comp8_Fall_IRQHandler>:
 3c8:	e7fe      	b.n	3c8 <ACE_Comp8_Fall_IRQHandler>

000003ca <ACE_Comp9_Fall_IRQHandler>:
 3ca:	e7fe      	b.n	3ca <ACE_Comp9_Fall_IRQHandler>

000003cc <ACE_Comp10_Fall_IRQHandler>:
 3cc:	e7fe      	b.n	3cc <ACE_Comp10_Fall_IRQHandler>

000003ce <ACE_Comp11_Fall_IRQHandler>:
 3ce:	e7fe      	b.n	3ce <ACE_Comp11_Fall_IRQHandler>

000003d0 <ACE_Comp0_Rise_IRQHandler>:
 3d0:	e7fe      	b.n	3d0 <ACE_Comp0_Rise_IRQHandler>

000003d2 <ACE_Comp1_Rise_IRQHandler>:
 3d2:	e7fe      	b.n	3d2 <ACE_Comp1_Rise_IRQHandler>

000003d4 <ACE_Comp2_Rise_IRQHandler>:
 3d4:	e7fe      	b.n	3d4 <ACE_Comp2_Rise_IRQHandler>

000003d6 <ACE_Comp3_Rise_IRQHandler>:
 3d6:	e7fe      	b.n	3d6 <ACE_Comp3_Rise_IRQHandler>

000003d8 <ACE_Comp4_Rise_IRQHandler>:
 3d8:	e7fe      	b.n	3d8 <ACE_Comp4_Rise_IRQHandler>

000003da <ACE_Comp5_Rise_IRQHandler>:
 3da:	e7fe      	b.n	3da <ACE_Comp5_Rise_IRQHandler>

000003dc <ACE_Comp6_Rise_IRQHandler>:
 3dc:	e7fe      	b.n	3dc <ACE_Comp6_Rise_IRQHandler>

000003de <ACE_Comp7_Rise_IRQHandler>:
 3de:	e7fe      	b.n	3de <ACE_Comp7_Rise_IRQHandler>

000003e0 <ACE_Comp8_Rise_IRQHandler>:
 3e0:	e7fe      	b.n	3e0 <ACE_Comp8_Rise_IRQHandler>

000003e2 <ACE_Comp9_Rise_IRQHandler>:
 3e2:	e7fe      	b.n	3e2 <ACE_Comp9_Rise_IRQHandler>

000003e4 <ACE_Comp10_Rise_IRQHandler>:
 3e4:	e7fe      	b.n	3e4 <ACE_Comp10_Rise_IRQHandler>

000003e6 <ACE_Comp11_Rise_IRQHandler>:
 3e6:	e7fe      	b.n	3e6 <ACE_Comp11_Rise_IRQHandler>

000003e8 <ACE_ADC0_FifoFull_IRQHandler>:
 3e8:	e7fe      	b.n	3e8 <ACE_ADC0_FifoFull_IRQHandler>

000003ea <ACE_ADC0_FifoAFull_IRQHandler>:
 3ea:	e7fe      	b.n	3ea <ACE_ADC0_FifoAFull_IRQHandler>

000003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
 3ec:	e7fe      	b.n	3ec <ACE_ADC0_FifoEmpty_IRQHandler>

000003ee <ACE_ADC1_FifoFull_IRQHandler>:
 3ee:	e7fe      	b.n	3ee <ACE_ADC1_FifoFull_IRQHandler>

000003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
 3f0:	e7fe      	b.n	3f0 <ACE_ADC1_FifoAFull_IRQHandler>

000003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
 3f2:	e7fe      	b.n	3f2 <ACE_ADC1_FifoEmpty_IRQHandler>

000003f4 <ACE_ADC2_FifoFull_IRQHandler>:
 3f4:	e7fe      	b.n	3f4 <ACE_ADC2_FifoFull_IRQHandler>

000003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
 3f6:	e7fe      	b.n	3f6 <ACE_ADC2_FifoAFull_IRQHandler>

000003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
 3f8:	e7fe      	b.n	3f8 <ACE_ADC2_FifoEmpty_IRQHandler>
 3fa:	e7fe      	b.n	3fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
 3fc:	e7fe      	b.n	3fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
 3fe:	e7fe      	b.n	3fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
 400:	e7fe      	b.n	400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
 402:	e7fe      	b.n	402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
 404:	e7fe      	b.n	404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
 406:	e7fe      	b.n	406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
 408:	e7fe      	b.n	408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
 40a:	e7fe      	b.n	40a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
 40c:	e7fe      	b.n	40c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
 40e:	e7fe      	b.n	40e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
 410:	e7fe      	b.n	410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
 412:	e7fe      	b.n	412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
 414:	e7fe      	b.n	414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
 416:	e7fe      	b.n	416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
 418:	e7fe      	b.n	418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
 41a:	e7fe      	b.n	41a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
 41c:	e7fe      	b.n	41c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
 41e:	e7fe      	b.n	41e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
 420:	e7fe      	b.n	420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
 422:	e7fe      	b.n	422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
 424:	e7fe      	b.n	424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
 426:	e7fe      	b.n	426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
 428:	e7fe      	b.n	428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
 42a:	e7fe      	b.n	42a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
 42c:	e7fe      	b.n	42c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
 42e:	e7fe      	b.n	42e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
 430:	e7fe      	b.n	430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
 432:	e7fe      	b.n	432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
 434:	e7fe      	b.n	434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
 436:	e7fe      	b.n	436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
 438:	e7fe      	b.n	438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
 43a:	0000      	.short	0x0000
 43c:	00001b21 	.word	0x00001b21
 440:	00000001 	.word	0x00000001
 444:	60000470 	.word	0x60000470
 448:	00000470 	.word	0x00000470
 44c:	000026a0 	.word	0x000026a0
 450:	600026a0 	.word	0x600026a0
 454:	20000000 	.word	0x20000000
 458:	20000074 	.word	0x20000074
 45c:	00000000 	.word	0x00000000
 460:	20000074 	.word	0x20000074
 464:	20002150 	.word	0x20002150
 468:	000022ad 	.word	0x000022ad
 46c:	000006a9 	.word	0x000006a9

Disassembly of section .text:

00000470 <__do_global_dtors_aux>:
     470:	f240 0374 	movw	r3, #116	; 0x74
     474:	f2c2 0300 	movt	r3, #8192	; 0x2000
     478:	781a      	ldrb	r2, [r3, #0]
     47a:	b90a      	cbnz	r2, 480 <__do_global_dtors_aux+0x10>
     47c:	2001      	movs	r0, #1
     47e:	7018      	strb	r0, [r3, #0]
     480:	4770      	bx	lr
     482:	bf00      	nop

00000484 <frame_dummy>:
     484:	f240 0000 	movw	r0, #0
     488:	f2c2 0000 	movt	r0, #8192	; 0x2000
     48c:	b508      	push	{r3, lr}
     48e:	6803      	ldr	r3, [r0, #0]
     490:	b12b      	cbz	r3, 49e <frame_dummy+0x1a>
     492:	f240 0300 	movw	r3, #0
     496:	f2c0 0300 	movt	r3, #0
     49a:	b103      	cbz	r3, 49e <frame_dummy+0x1a>
     49c:	4798      	blx	r3
     49e:	bd08      	pop	{r3, pc}

000004a0 <setServoPin>:
     4a0:	f1b0 3fff 	cmp.w	r0, #4294967295
     4a4:	b430      	push	{r4, r5}
     4a6:	d01e      	beq.n	4e6 <setServoPin+0x46>
     4a8:	2801      	cmp	r0, #1
     4aa:	d079      	beq.n	5a0 <setServoPin+0x100>
     4ac:	f240 0004 	movw	r0, #4
     4b0:	f641 0120 	movw	r1, #6176	; 0x1820
     4b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     4b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
     4bc:	6800      	ldr	r0, [r0, #0]
     4be:	6809      	ldr	r1, [r1, #0]
     4c0:	6001      	str	r1, [r0, #0]
     4c2:	f1b2 3fff 	cmp.w	r2, #4294967295
     4c6:	d02a      	beq.n	51e <setServoPin+0x7e>
     4c8:	2a01      	cmp	r2, #1
     4ca:	d044      	beq.n	556 <setServoPin+0xb6>
     4cc:	f240 0118 	movw	r1, #24
     4d0:	f240 039c 	movw	r3, #156	; 0x9c
     4d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
     4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4dc:	680a      	ldr	r2, [r1, #0]
     4de:	6818      	ldr	r0, [r3, #0]
     4e0:	6010      	str	r0, [r2, #0]
     4e2:	bc30      	pop	{r4, r5}
     4e4:	4770      	bx	lr
     4e6:	f641 0020 	movw	r0, #6176	; 0x1820
     4ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
     4ee:	6804      	ldr	r4, [r0, #0]
     4f0:	f247 5c30 	movw	ip, #30000	; 0x7530
     4f4:	4564      	cmp	r4, ip
     4f6:	d9e4      	bls.n	4c2 <setServoPin+0x22>
     4f8:	ebc1 1c41 	rsb	ip, r1, r1, lsl #5
     4fc:	eb01 018c 	add.w	r1, r1, ip, lsl #2
     500:	f240 0504 	movw	r5, #4
     504:	f5a1 5178 	sub.w	r1, r1, #15872	; 0x3e00
     508:	f2c2 0500 	movt	r5, #8192	; 0x2000
     50c:	3903      	subs	r1, #3
     50e:	682d      	ldr	r5, [r5, #0]
     510:	eba4 11d1 	sub.w	r1, r4, r1, lsr #7
     514:	f1b2 3fff 	cmp.w	r2, #4294967295
     518:	6001      	str	r1, [r0, #0]
     51a:	6029      	str	r1, [r5, #0]
     51c:	d1d4      	bne.n	4c8 <setServoPin+0x28>
     51e:	f240 029c 	movw	r2, #156	; 0x9c
     522:	f2c2 0200 	movt	r2, #8192	; 0x2000
     526:	f241 1170 	movw	r1, #4464	; 0x1170
     52a:	6810      	ldr	r0, [r2, #0]
     52c:	f2c0 0101 	movt	r1, #1
     530:	4288      	cmp	r0, r1
     532:	d9d6      	bls.n	4e2 <setServoPin+0x42>
     534:	eb03 0183 	add.w	r1, r3, r3, lsl #2
     538:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
     53c:	f240 0118 	movw	r1, #24
     540:	f5ac 6346 	sub.w	r3, ip, #3168	; 0xc60
     544:	f2c2 0100 	movt	r1, #8192	; 0x2000
     548:	3b07      	subs	r3, #7
     54a:	6809      	ldr	r1, [r1, #0]
     54c:	eba0 10d3 	sub.w	r0, r0, r3, lsr #7
     550:	6010      	str	r0, [r2, #0]
     552:	6008      	str	r0, [r1, #0]
     554:	e7c5      	b.n	4e2 <setServoPin+0x42>
     556:	f240 029c 	movw	r2, #156	; 0x9c
     55a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     55e:	f643 0c7f 	movw	ip, #14463	; 0x387f
     562:	6810      	ldr	r0, [r2, #0]
     564:	f2c0 0c01 	movt	ip, #1
     568:	4560      	cmp	r0, ip
     56a:	d8ba      	bhi.n	4e2 <setServoPin+0x42>
     56c:	f1c3 047f 	rsb	r4, r3, #127	; 0x7f
     570:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
     574:	f640 0111 	movw	r1, #2065	; 0x811
     578:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
     57c:	f2c0 2104 	movt	r1, #516	; 0x204
     580:	fba1 4c03 	umull	r4, ip, r1, r3
     584:	f240 0118 	movw	r1, #24
     588:	ebcc 0403 	rsb	r4, ip, r3
     58c:	f2c2 0100 	movt	r1, #8192	; 0x2000
     590:	eb0c 0c54 	add.w	ip, ip, r4, lsr #1
     594:	680c      	ldr	r4, [r1, #0]
     596:	eb00 139c 	add.w	r3, r0, ip, lsr #6
     59a:	6013      	str	r3, [r2, #0]
     59c:	6023      	str	r3, [r4, #0]
     59e:	e7a0      	b.n	4e2 <setServoPin+0x42>
     5a0:	f641 0020 	movw	r0, #6176	; 0x1820
     5a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5a8:	f24d 4cbf 	movw	ip, #54463	; 0xd4bf
     5ac:	6804      	ldr	r4, [r0, #0]
     5ae:	f2c0 0c01 	movt	ip, #1
     5b2:	4564      	cmp	r4, ip
     5b4:	d885      	bhi.n	4c2 <setServoPin+0x22>
     5b6:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
     5ba:	ebc1 1541 	rsb	r5, r1, r1, lsl #5
     5be:	f640 0c11 	movw	ip, #2065	; 0x811
     5c2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
     5c6:	f2c0 2c04 	movt	ip, #516	; 0x204
     5ca:	fbac 5c01 	umull	r5, ip, ip, r1
     5ce:	f240 0504 	movw	r5, #4
     5d2:	ebcc 0101 	rsb	r1, ip, r1
     5d6:	f2c2 0500 	movt	r5, #8192	; 0x2000
     5da:	eb0c 0c51 	add.w	ip, ip, r1, lsr #1
     5de:	682d      	ldr	r5, [r5, #0]
     5e0:	eb04 149c 	add.w	r4, r4, ip, lsr #6
     5e4:	6004      	str	r4, [r0, #0]
     5e6:	602c      	str	r4, [r5, #0]
     5e8:	e76b      	b.n	4c2 <setServoPin+0x22>
     5ea:	bf00      	nop

000005ec <GPIO8_IRQHandler>:
     5ec:	f240 0008 	movw	r0, #8
     5f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5f4:	6803      	ldr	r3, [r0, #0]
     5f6:	2200      	movs	r2, #0
     5f8:	2008      	movs	r0, #8
     5fa:	601a      	str	r2, [r3, #0]
     5fc:	f001 ba24 	b.w	1a48 <MSS_GPIO_clear_irq>

00000600 <GPIO5_IRQHandler>:
     600:	b510      	push	{r4, lr}
     602:	f000 fc5f 	bl	ec4 <MYTIMER_disable>
     606:	f240 0214 	movw	r2, #20
     60a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     60e:	6810      	ldr	r0, [r2, #0]
     610:	2107      	movs	r1, #7
     612:	f240 0394 	movw	r3, #148	; 0x94
     616:	6001      	str	r1, [r0, #0]
     618:	f2c2 0300 	movt	r3, #8192	; 0x2000
     61c:	2200      	movs	r2, #0
     61e:	2005      	movs	r0, #5
     620:	601a      	str	r2, [r3, #0]
     622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     626:	f001 ba0f 	b.w	1a48 <MSS_GPIO_clear_irq>
     62a:	bf00      	nop

0000062c <setMotorPin>:
     62c:	b570      	push	{r4, r5, r6, lr}
     62e:	b2c5      	uxtb	r5, r0
     630:	460c      	mov	r4, r1
     632:	2001      	movs	r0, #1
     634:	4629      	mov	r1, r5
     636:	461e      	mov	r6, r3
     638:	4615      	mov	r5, r2
     63a:	f001 f9d7 	bl	19ec <MSS_GPIO_set_output>
     63e:	b2e1      	uxtb	r1, r4
     640:	2002      	movs	r0, #2
     642:	f001 f9d3 	bl	19ec <MSS_GPIO_set_output>
     646:	b2e9      	uxtb	r1, r5
     648:	2003      	movs	r0, #3
     64a:	f001 f9cf 	bl	19ec <MSS_GPIO_set_output>
     64e:	b2f1      	uxtb	r1, r6
     650:	2004      	movs	r0, #4
     652:	f001 f9cb 	bl	19ec <MSS_GPIO_set_output>
     656:	f240 020c 	movw	r2, #12
     65a:	f240 0310 	movw	r3, #16
     65e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     662:	f2c2 0300 	movt	r3, #8192	; 0x2000
     666:	6810      	ldr	r0, [r2, #0]
     668:	681b      	ldr	r3, [r3, #0]
     66a:	9904      	ldr	r1, [sp, #16]
     66c:	9a05      	ldr	r2, [sp, #20]
     66e:	6001      	str	r1, [r0, #0]
     670:	601a      	str	r2, [r3, #0]
     672:	bd70      	pop	{r4, r5, r6, pc}

00000674 <delay>:
     674:	b510      	push	{r4, lr}
     676:	4604      	mov	r4, r0
     678:	f000 fc4a 	bl	f10 <DELAY_setOverflowVal>
     67c:	f000 fc34 	bl	ee8 <DELAY_enable>
     680:	eb04 0144 	add.w	r1, r4, r4, lsl #1
     684:	f248 531f 	movw	r3, #34079	; 0x851f
     688:	eb01 1041 	add.w	r0, r1, r1, lsl #5
     68c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
     690:	fba3 2400 	umull	r2, r4, r3, r0
     694:	0964      	lsrs	r4, r4, #5
     696:	f000 fc41 	bl	f1c <DELAY_getCounterVal>
     69a:	42a0      	cmp	r0, r4
     69c:	d3fb      	bcc.n	696 <delay+0x22>
     69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     6a2:	f000 bc2b 	b.w	efc <DELAY_disable>
     6a6:	bf00      	nop

000006a8 <main>:
     6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6ac:	b0a9      	sub	sp, #164	; 0xa4
     6ae:	f001 fa2f 	bl	1b10 <ACE_init>
     6b2:	f242 40b0 	movw	r0, #9392	; 0x24b0
     6b6:	f2c0 0000 	movt	r0, #0
     6ba:	f001 f9fd 	bl	1ab8 <ACE_get_channel_handle>
     6be:	f240 018c 	movw	r1, #140	; 0x8c
     6c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     6c6:	7008      	strb	r0, [r1, #0]
     6c8:	f242 40c4 	movw	r0, #9412	; 0x24c4
     6cc:	f2c0 0000 	movt	r0, #0
     6d0:	9103      	str	r1, [sp, #12]
     6d2:	f001 f9f1 	bl	1ab8 <ACE_get_channel_handle>
     6d6:	f640 0574 	movw	r5, #2164	; 0x874
     6da:	f2c2 0500 	movt	r5, #8192	; 0x2000
     6de:	7028      	strb	r0, [r5, #0]
     6e0:	f242 40d8 	movw	r0, #9432	; 0x24d8
     6e4:	f2c0 0000 	movt	r0, #0
     6e8:	9504      	str	r5, [sp, #16]
     6ea:	f001 f9e5 	bl	1ab8 <ACE_get_channel_handle>
     6ee:	f640 0678 	movw	r6, #2168	; 0x878
     6f2:	f2c2 0600 	movt	r6, #8192	; 0x2000
     6f6:	7030      	strb	r0, [r6, #0]
     6f8:	f242 40ec 	movw	r0, #9452	; 0x24ec
     6fc:	f2c0 0000 	movt	r0, #0
     700:	9605      	str	r6, [sp, #20]
     702:	f001 f9d9 	bl	1ab8 <ACE_get_channel_handle>
     706:	f640 0479 	movw	r4, #2169	; 0x879
     70a:	f2c2 0400 	movt	r4, #8192	; 0x2000
     70e:	9406      	str	r4, [sp, #24]
     710:	f240 05a0 	movw	r5, #160	; 0xa0
     714:	f641 071c 	movw	r7, #6172	; 0x181c
     718:	f240 098e 	movw	r9, #142	; 0x8e
     71c:	f640 0a76 	movw	sl, #2166	; 0x876
     720:	f240 0190 	movw	r1, #144	; 0x90
     724:	f640 067c 	movw	r6, #2172	; 0x87c
     728:	f241 0c4c 	movw	ip, #4172	; 0x104c
     72c:	9a06      	ldr	r2, [sp, #24]
     72e:	f2c2 0500 	movt	r5, #8192	; 0x2000
     732:	f2c2 0700 	movt	r7, #8192	; 0x2000
     736:	f2c2 0900 	movt	r9, #8192	; 0x2000
     73a:	f2c2 0a00 	movt	sl, #8192	; 0x2000
     73e:	f2c2 0600 	movt	r6, #8192	; 0x2000
     742:	f240 0ba4 	movw	fp, #164	; 0xa4
     746:	f641 0824 	movw	r8, #6180	; 0x1824
     74a:	f240 0478 	movw	r4, #120	; 0x78
     74e:	f04f 0300 	mov.w	r3, #0
     752:	f2c2 0100 	movt	r1, #8192	; 0x2000
     756:	f2c2 0c00 	movt	ip, #8192	; 0x2000
     75a:	9702      	str	r7, [sp, #8]
     75c:	7010      	strb	r0, [r2, #0]
     75e:	4657      	mov	r7, sl
     760:	802b      	strh	r3, [r5, #0]
     762:	46b2      	mov	sl, r6
     764:	9107      	str	r1, [sp, #28]
     766:	464e      	mov	r6, r9
     768:	f2c2 0b00 	movt	fp, #8192	; 0x2000
     76c:	f2c2 0800 	movt	r8, #8192	; 0x2000
     770:	f2c2 0400 	movt	r4, #8192	; 0x2000
     774:	9508      	str	r5, [sp, #32]
     776:	46e1      	mov	r9, ip
     778:	9b03      	ldr	r3, [sp, #12]
     77a:	7818      	ldrb	r0, [r3, #0]
     77c:	f001 f986 	bl	1a8c <ACE_get_ppe_sample>
     780:	9904      	ldr	r1, [sp, #16]
     782:	9d02      	ldr	r5, [sp, #8]
     784:	8028      	strh	r0, [r5, #0]
     786:	7808      	ldrb	r0, [r1, #0]
     788:	f001 f980 	bl	1a8c <ACE_get_ppe_sample>
     78c:	9a05      	ldr	r2, [sp, #20]
     78e:	8030      	strh	r0, [r6, #0]
     790:	7810      	ldrb	r0, [r2, #0]
     792:	f001 f97b 	bl	1a8c <ACE_get_ppe_sample>
     796:	9b06      	ldr	r3, [sp, #24]
     798:	8038      	strh	r0, [r7, #0]
     79a:	7818      	ldrb	r0, [r3, #0]
     79c:	f001 f976 	bl	1a8c <ACE_get_ppe_sample>
     7a0:	9902      	ldr	r1, [sp, #8]
     7a2:	9d08      	ldr	r5, [sp, #32]
     7a4:	f8b1 c000 	ldrh.w	ip, [r1]
     7a8:	6822      	ldr	r2, [r4, #0]
     7aa:	882b      	ldrh	r3, [r5, #0]
     7ac:	eb0c 0e02 	add.w	lr, ip, r2
     7b0:	f82b c013 	strh.w	ip, [fp, r3, lsl #1]
     7b4:	f8c4 e000 	str.w	lr, [r4]
     7b8:	9d07      	ldr	r5, [sp, #28]
     7ba:	f8b6 c000 	ldrh.w	ip, [r6]
     7be:	f8b7 e000 	ldrh.w	lr, [r7]
     7c2:	1c59      	adds	r1, r3, #1
     7c4:	b289      	uxth	r1, r1
     7c6:	f829 0013 	strh.w	r0, [r9, r3, lsl #1]
     7ca:	8028      	strh	r0, [r5, #0]
     7cc:	f828 c013 	strh.w	ip, [r8, r3, lsl #1]
     7d0:	f82a e013 	strh.w	lr, [sl, r3, lsl #1]
     7d4:	f240 30e7 	movw	r0, #999	; 0x3e7
     7d8:	9b08      	ldr	r3, [sp, #32]
     7da:	f240 02a0 	movw	r2, #160	; 0xa0
     7de:	4281      	cmp	r1, r0
     7e0:	8019      	strh	r1, [r3, #0]
     7e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     7e6:	d9c7      	bls.n	778 <main+0xd0>
     7e8:	f10d 0e8c 	add.w	lr, sp, #140	; 0x8c
     7ec:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
     7f0:	46b1      	mov	r9, r6
     7f2:	f242 4c78 	movw	ip, #9336	; 0x2478
     7f6:	f242 469c 	movw	r6, #9372	; 0x249c
     7fa:	46d8      	mov	r8, fp
     7fc:	46ba      	mov	sl, r7
     7fe:	f2c0 0600 	movt	r6, #0
     802:	4677      	mov	r7, lr
     804:	f2c0 0c00 	movt	ip, #0
     808:	920b      	str	r2, [sp, #44]	; 0x2c
     80a:	461d      	mov	r5, r3
     80c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     80e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
     810:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
     814:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
     818:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
     81c:	4644      	mov	r4, r8
     81e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     820:	f8d6 e000 	ldr.w	lr, [r6]
     824:	940a      	str	r4, [sp, #40]	; 0x28
     826:	f8c7 e000 	str.w	lr, [r7]
     82a:	f8dc c000 	ldr.w	ip, [ip]
     82e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     830:	f240 0414 	movw	r4, #20
     834:	f240 0204 	movw	r2, #4
     838:	f240 0318 	movw	r3, #24
     83c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     840:	f2c2 0300 	movt	r3, #8192	; 0x2000
     844:	f2c2 0400 	movt	r4, #8192	; 0x2000
     848:	6818      	ldr	r0, [r3, #0]
     84a:	6816      	ldr	r6, [r2, #0]
     84c:	f8c7 c000 	str.w	ip, [r7]
     850:	f641 081e 	movw	r8, #6174	; 0x181e
     854:	6827      	ldr	r7, [r4, #0]
     856:	f242 43f8 	movw	r3, #9464	; 0x24f8
     85a:	f641 0220 	movw	r2, #6176	; 0x1820
     85e:	f240 019c 	movw	r1, #156	; 0x9c
     862:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
     866:	f2c0 0301 	movt	r3, #1
     86a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     86e:	f2c2 0100 	movt	r1, #8192	; 0x2000
     872:	f04f 0b07 	mov.w	fp, #7
     876:	f2c2 0800 	movt	r8, #8192	; 0x2000
     87a:	f8c7 b000 	str.w	fp, [r7]
     87e:	f8a8 c000 	strh.w	ip, [r8]
     882:	6033      	str	r3, [r6, #0]
     884:	6003      	str	r3, [r0, #0]
     886:	600b      	str	r3, [r1, #0]
     888:	6013      	str	r3, [r2, #0]
     88a:	f000 fb0f 	bl	eac <MYTIMER_init>
     88e:	f24e 1000 	movw	r0, #57600	; 0xe100
     892:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
     896:	f000 fb1f 	bl	ed8 <MYTIMER_setOverflowVal>
     89a:	f000 fb23 	bl	ee4 <DELAY_init>
     89e:	f641 70f4 	movw	r0, #8180	; 0x1ff4
     8a2:	2203      	movs	r2, #3
     8a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8a8:	f44f 4161 	mov.w	r1, #57600	; 0xe100
     8ac:	f000 fc80 	bl	11b0 <MSS_UART_init>
     8b0:	f001 f85a 	bl	1968 <MSS_GPIO_init>
     8b4:	2000      	movs	r0, #0
     8b6:	2105      	movs	r1, #5
     8b8:	f001 f88e 	bl	19d8 <MSS_GPIO_config>
     8bc:	2001      	movs	r0, #1
     8be:	2105      	movs	r1, #5
     8c0:	f001 f88a 	bl	19d8 <MSS_GPIO_config>
     8c4:	2002      	movs	r0, #2
     8c6:	2105      	movs	r1, #5
     8c8:	f001 f886 	bl	19d8 <MSS_GPIO_config>
     8cc:	2003      	movs	r0, #3
     8ce:	2105      	movs	r1, #5
     8d0:	f001 f882 	bl	19d8 <MSS_GPIO_config>
     8d4:	2004      	movs	r0, #4
     8d6:	2105      	movs	r1, #5
     8d8:	f001 f87e 	bl	19d8 <MSS_GPIO_config>
     8dc:	2005      	movs	r0, #5
     8de:	2142      	movs	r1, #66	; 0x42
     8e0:	f001 f87a 	bl	19d8 <MSS_GPIO_config>
     8e4:	2142      	movs	r1, #66	; 0x42
     8e6:	2008      	movs	r0, #8
     8e8:	f001 f876 	bl	19d8 <MSS_GPIO_config>
     8ec:	f240 0308 	movw	r3, #8
     8f0:	2005      	movs	r0, #5
     8f2:	9308      	str	r3, [sp, #32]
     8f4:	f001 f886 	bl	1a04 <MSS_GPIO_enable_irq>
     8f8:	9908      	ldr	r1, [sp, #32]
     8fa:	2008      	movs	r0, #8
     8fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
     900:	9108      	str	r1, [sp, #32]
     902:	f001 f87f 	bl	1a04 <MSS_GPIO_enable_irq>
     906:	9e08      	ldr	r6, [sp, #32]
     908:	f240 0294 	movw	r2, #148	; 0x94
     90c:	6830      	ldr	r0, [r6, #0]
     90e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     912:	2600      	movs	r6, #0
     914:	6006      	str	r6, [r0, #0]
     916:	2101      	movs	r1, #1
     918:	4630      	mov	r0, r6
     91a:	6016      	str	r6, [r2, #0]
     91c:	9209      	str	r2, [sp, #36]	; 0x24
     91e:	f001 f865 	bl	19ec <MSS_GPIO_set_output>
     922:	4631      	mov	r1, r6
     924:	4632      	mov	r2, r6
     926:	4633      	mov	r3, r6
     928:	4630      	mov	r0, r6
     92a:	9600      	str	r6, [sp, #0]
     92c:	9601      	str	r6, [sp, #4]
     92e:	f7ff fe7d 	bl	62c <setMotorPin>
     932:	f242 0044 	movw	r0, #8260	; 0x2044
     936:	f2c2 0000 	movt	r0, #8192	; 0x2000
     93a:	f000 ffb7 	bl	18ac <MSS_SPI_init>
     93e:	f242 0044 	movw	r0, #8260	; 0x2044
     942:	465b      	mov	r3, fp
     944:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
     948:	f2c2 0000 	movt	r0, #8192	; 0x2000
     94c:	4631      	mov	r1, r6
     94e:	f04f 0b08 	mov.w	fp, #8
     952:	f8cd b000 	str.w	fp, [sp]
     956:	f000 fd15 	bl	1384 <MSS_SPI_configure_master_mode>
     95a:	f242 0044 	movw	r0, #8260	; 0x2044
     95e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     962:	4631      	mov	r1, r6
     964:	f000 fd78 	bl	1458 <MSS_SPI_set_slave_select>
     968:	4630      	mov	r0, r6
     96a:	4631      	mov	r1, r6
     96c:	f001 f83e 	bl	19ec <MSS_GPIO_set_output>
     970:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
     972:	803e      	strh	r6, [r7, #0]
     974:	ab28      	add	r3, sp, #160	; 0xa0
     976:	eb03 0786 	add.w	r7, r3, r6, lsl #2
     97a:	f242 0044 	movw	r0, #8260	; 0x2044
     97e:	f857 1c14 	ldr.w	r1, [r7, #-20]
     982:	f2c2 0000 	movt	r0, #8192	; 0x2000
     986:	f000 fddd 	bl	1544 <MSS_SPI_transfer_frame>
     98a:	f847 0c5c 	str.w	r0, [r7, #-92]
     98e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     992:	f7ff fe6f 	bl	674 <delay>
     996:	8828      	ldrh	r0, [r5, #0]
     998:	1c41      	adds	r1, r0, #1
     99a:	b28e      	uxth	r6, r1
     99c:	2e04      	cmp	r6, #4
     99e:	802e      	strh	r6, [r5, #0]
     9a0:	d9e8      	bls.n	974 <main+0x2cc>
     9a2:	2101      	movs	r1, #1
     9a4:	2000      	movs	r0, #0
     9a6:	f001 f821 	bl	19ec <MSS_GPIO_set_output>
     9aa:	f248 60a0 	movw	r0, #34464	; 0x86a0
     9ae:	f2c0 0001 	movt	r0, #1
     9b2:	f7ff fe5f 	bl	674 <delay>
     9b6:	f240 078e 	movw	r7, #142	; 0x8e
     9ba:	f240 0c98 	movw	ip, #152	; 0x98
     9be:	f641 021c 	movw	r2, #6172	; 0x181c
     9c2:	f640 0076 	movw	r0, #2166	; 0x876
     9c6:	f641 011e 	movw	r1, #6174	; 0x181e
     9ca:	f240 0694 	movw	r6, #148	; 0x94
     9ce:	f2c2 0700 	movt	r7, #8192	; 0x2000
     9d2:	f2c2 0c00 	movt	ip, #8192	; 0x2000
     9d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
     9da:	f2c2 0000 	movt	r0, #8192	; 0x2000
     9de:	f2c2 0100 	movt	r1, #8192	; 0x2000
     9e2:	f2c2 0600 	movt	r6, #8192	; 0x2000
     9e6:	970c      	str	r7, [sp, #48]	; 0x30
     9e8:	46cb      	mov	fp, r9
     9ea:	920b      	str	r2, [sp, #44]	; 0x2c
     9ec:	46d1      	mov	r9, sl
     9ee:	900d      	str	r0, [sp, #52]	; 0x34
     9f0:	910a      	str	r1, [sp, #40]	; 0x28
     9f2:	960e      	str	r6, [sp, #56]	; 0x38
     9f4:	4667      	mov	r7, ip
     9f6:	46a2      	mov	sl, r4
     9f8:	f240 0498 	movw	r4, #152	; 0x98
     9fc:	2600      	movs	r6, #0
     9fe:	f2c2 0400 	movt	r4, #8192	; 0x2000
     a02:	f641 70f4 	movw	r0, #8180	; 0x1ff4
     a06:	4621      	mov	r1, r4
     a08:	2201      	movs	r2, #1
     a0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a0e:	703e      	strb	r6, [r7, #0]
     a10:	f000 fac8 	bl	fa4 <MSS_UART_get_rx>
     a14:	7839      	ldrb	r1, [r7, #0]
     a16:	3970      	subs	r1, #112	; 0x70
     a18:	b2cb      	uxtb	r3, r1
     a1a:	2b01      	cmp	r3, #1
     a1c:	f240 81b2 	bls.w	d84 <main+0x6dc>
     a20:	9c03      	ldr	r4, [sp, #12]
     a22:	7820      	ldrb	r0, [r4, #0]
     a24:	f001 f832 	bl	1a8c <ACE_get_ppe_sample>
     a28:	9b04      	ldr	r3, [sp, #16]
     a2a:	9902      	ldr	r1, [sp, #8]
     a2c:	8008      	strh	r0, [r1, #0]
     a2e:	7818      	ldrb	r0, [r3, #0]
     a30:	f001 f82c 	bl	1a8c <ACE_get_ppe_sample>
     a34:	9a05      	ldr	r2, [sp, #20]
     a36:	f8ab 0000 	strh.w	r0, [fp]
     a3a:	7810      	ldrb	r0, [r2, #0]
     a3c:	f001 f826 	bl	1a8c <ACE_get_ppe_sample>
     a40:	9e06      	ldr	r6, [sp, #24]
     a42:	f8a9 0000 	strh.w	r0, [r9]
     a46:	7830      	ldrb	r0, [r6, #0]
     a48:	f001 f820 	bl	1a8c <ACE_get_ppe_sample>
     a4c:	f8b8 3000 	ldrh.w	r3, [r8]
     a50:	9c07      	ldr	r4, [sp, #28]
     a52:	2bc8      	cmp	r3, #200	; 0xc8
     a54:	8020      	strh	r0, [r4, #0]
     a56:	f000 8157 	beq.w	d08 <main+0x660>
     a5a:	2b00      	cmp	r3, #0
     a5c:	f000 814e 	beq.w	cfc <main+0x654>
     a60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
     a62:	1e5e      	subs	r6, r3, #1
     a64:	8026      	strh	r6, [r4, #0]
     a66:	2000      	movs	r0, #0
     a68:	4601      	mov	r1, r0
     a6a:	f000 ffbf 	bl	19ec <MSS_GPIO_set_output>
     a6e:	f04f 0100 	mov.w	r1, #0
     a72:	8029      	strh	r1, [r5, #0]
     a74:	2400      	movs	r4, #0
     a76:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
     a7a:	eb0e 0684 	add.w	r6, lr, r4, lsl #2
     a7e:	f242 0044 	movw	r0, #8260	; 0x2044
     a82:	f856 1c38 	ldr.w	r1, [r6, #-56]
     a86:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a8a:	f000 fd5b 	bl	1544 <MSS_SPI_transfer_frame>
     a8e:	f846 0c5c 	str.w	r0, [r6, #-92]
     a92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a96:	f7ff fded 	bl	674 <delay>
     a9a:	882a      	ldrh	r2, [r5, #0]
     a9c:	1c50      	adds	r0, r2, #1
     a9e:	b284      	uxth	r4, r0
     aa0:	2c08      	cmp	r4, #8
     aa2:	802c      	strh	r4, [r5, #0]
     aa4:	d9e7      	bls.n	a76 <main+0x3ce>
     aa6:	2000      	movs	r0, #0
     aa8:	2101      	movs	r1, #1
     aaa:	f000 ff9f 	bl	19ec <MSS_GPIO_set_output>
     aae:	f248 60a0 	movw	r0, #34464	; 0x86a0
     ab2:	f2c0 0001 	movt	r0, #1
     ab6:	f7ff fddd 	bl	674 <delay>
     aba:	9c12      	ldr	r4, [sp, #72]	; 0x48
     abc:	2cce      	cmp	r4, #206	; 0xce
     abe:	d19b      	bne.n	9f8 <main+0x350>
     ac0:	9b18      	ldr	r3, [sp, #96]	; 0x60
     ac2:	0858      	lsrs	r0, r3, #1
     ac4:	f003 0101 	and.w	r1, r3, #1
     ac8:	004a      	lsls	r2, r1, #1
     aca:	f010 0f01 	tst.w	r0, #1
     ace:	bf18      	it	ne
     ad0:	f082 0201 	eorne.w	r2, r2, #1
     ad4:	0846      	lsrs	r6, r0, #1
     ad6:	0054      	lsls	r4, r2, #1
     ad8:	f016 0f01 	tst.w	r6, #1
     adc:	bf18      	it	ne
     ade:	f084 0401 	eorne.w	r4, r4, #1
     ae2:	0873      	lsrs	r3, r6, #1
     ae4:	0061      	lsls	r1, r4, #1
     ae6:	f013 0f01 	tst.w	r3, #1
     aea:	bf18      	it	ne
     aec:	f081 0101 	eorne.w	r1, r1, #1
     af0:	0858      	lsrs	r0, r3, #1
     af2:	004a      	lsls	r2, r1, #1
     af4:	f010 0f01 	tst.w	r0, #1
     af8:	bf18      	it	ne
     afa:	f082 0201 	eorne.w	r2, r2, #1
     afe:	0846      	lsrs	r6, r0, #1
     b00:	0054      	lsls	r4, r2, #1
     b02:	f016 0f01 	tst.w	r6, #1
     b06:	bf18      	it	ne
     b08:	f084 0401 	eorne.w	r4, r4, #1
     b0c:	0873      	lsrs	r3, r6, #1
     b0e:	0061      	lsls	r1, r4, #1
     b10:	f013 0f01 	tst.w	r3, #1
     b14:	bf18      	it	ne
     b16:	f081 0101 	eorne.w	r1, r1, #1
     b1a:	9e19      	ldr	r6, [sp, #100]	; 0x64
     b1c:	0048      	lsls	r0, r1, #1
     b1e:	f013 0f02 	tst.w	r3, #2
     b22:	bf18      	it	ne
     b24:	f080 0001 	eorne.w	r0, r0, #1
     b28:	f006 0401 	and.w	r4, r6, #1
     b2c:	0871      	lsrs	r1, r6, #1
     b2e:	0063      	lsls	r3, r4, #1
     b30:	43c2      	mvns	r2, r0
     b32:	f011 0f01 	tst.w	r1, #1
     b36:	bf18      	it	ne
     b38:	f083 0301 	eorne.w	r3, r3, #1
     b3c:	0848      	lsrs	r0, r1, #1
     b3e:	005e      	lsls	r6, r3, #1
     b40:	f010 0f01 	tst.w	r0, #1
     b44:	bf18      	it	ne
     b46:	f086 0601 	eorne.w	r6, r6, #1
     b4a:	0844      	lsrs	r4, r0, #1
     b4c:	0073      	lsls	r3, r6, #1
     b4e:	f014 0f01 	tst.w	r4, #1
     b52:	bf18      	it	ne
     b54:	f083 0301 	eorne.w	r3, r3, #1
     b58:	0861      	lsrs	r1, r4, #1
     b5a:	0058      	lsls	r0, r3, #1
     b5c:	f011 0f01 	tst.w	r1, #1
     b60:	bf18      	it	ne
     b62:	f080 0001 	eorne.w	r0, r0, #1
     b66:	084e      	lsrs	r6, r1, #1
     b68:	0044      	lsls	r4, r0, #1
     b6a:	f016 0f01 	tst.w	r6, #1
     b6e:	bf18      	it	ne
     b70:	f084 0401 	eorne.w	r4, r4, #1
     b74:	0870      	lsrs	r0, r6, #1
     b76:	0063      	lsls	r3, r4, #1
     b78:	f010 0f01 	tst.w	r0, #1
     b7c:	9916      	ldr	r1, [sp, #88]	; 0x58
     b7e:	bf18      	it	ne
     b80:	f083 0301 	eorne.w	r3, r3, #1
     b84:	005b      	lsls	r3, r3, #1
     b86:	f010 0f02 	tst.w	r0, #2
     b8a:	bf18      	it	ne
     b8c:	f083 0301 	eorne.w	r3, r3, #1
     b90:	f001 0601 	and.w	r6, r1, #1
     b94:	084c      	lsrs	r4, r1, #1
     b96:	0070      	lsls	r0, r6, #1
     b98:	f014 0f01 	tst.w	r4, #1
     b9c:	bf18      	it	ne
     b9e:	f080 0001 	eorne.w	r0, r0, #1
     ba2:	0861      	lsrs	r1, r4, #1
     ba4:	0046      	lsls	r6, r0, #1
     ba6:	f011 0f01 	tst.w	r1, #1
     baa:	bf18      	it	ne
     bac:	f086 0601 	eorne.w	r6, r6, #1
     bb0:	084c      	lsrs	r4, r1, #1
     bb2:	0070      	lsls	r0, r6, #1
     bb4:	f014 0f01 	tst.w	r4, #1
     bb8:	bf18      	it	ne
     bba:	f080 0001 	eorne.w	r0, r0, #1
     bbe:	0861      	lsrs	r1, r4, #1
     bc0:	0046      	lsls	r6, r0, #1
     bc2:	f011 0f01 	tst.w	r1, #1
     bc6:	bf18      	it	ne
     bc8:	f086 0601 	eorne.w	r6, r6, #1
     bcc:	084c      	lsrs	r4, r1, #1
     bce:	0070      	lsls	r0, r6, #1
     bd0:	f014 0f01 	tst.w	r4, #1
     bd4:	bf18      	it	ne
     bd6:	f080 0001 	eorne.w	r0, r0, #1
     bda:	0861      	lsrs	r1, r4, #1
     bdc:	0046      	lsls	r6, r0, #1
     bde:	f011 0f01 	tst.w	r1, #1
     be2:	bf18      	it	ne
     be4:	f086 0601 	eorne.w	r6, r6, #1
     be8:	0074      	lsls	r4, r6, #1
     bea:	9817      	ldr	r0, [sp, #92]	; 0x5c
     bec:	f011 0f02 	tst.w	r1, #2
     bf0:	bf18      	it	ne
     bf2:	f084 0401 	eorne.w	r4, r4, #1
     bf6:	43e6      	mvns	r6, r4
     bf8:	0841      	lsrs	r1, r0, #1
     bfa:	f000 0401 	and.w	r4, r0, #1
     bfe:	0060      	lsls	r0, r4, #1
     c00:	f011 0f01 	tst.w	r1, #1
     c04:	bf18      	it	ne
     c06:	f080 0001 	eorne.w	r0, r0, #1
     c0a:	0849      	lsrs	r1, r1, #1
     c0c:	0044      	lsls	r4, r0, #1
     c0e:	f011 0f01 	tst.w	r1, #1
     c12:	bf18      	it	ne
     c14:	f084 0401 	eorne.w	r4, r4, #1
     c18:	0848      	lsrs	r0, r1, #1
     c1a:	0064      	lsls	r4, r4, #1
     c1c:	f010 0f01 	tst.w	r0, #1
     c20:	bf18      	it	ne
     c22:	f084 0401 	eorne.w	r4, r4, #1
     c26:	0841      	lsrs	r1, r0, #1
     c28:	0060      	lsls	r0, r4, #1
     c2a:	f011 0f01 	tst.w	r1, #1
     c2e:	bf18      	it	ne
     c30:	f080 0001 	eorne.w	r0, r0, #1
     c34:	0849      	lsrs	r1, r1, #1
     c36:	0044      	lsls	r4, r0, #1
     c38:	f011 0f01 	tst.w	r1, #1
     c3c:	bf18      	it	ne
     c3e:	f084 0401 	eorne.w	r4, r4, #1
     c42:	0848      	lsrs	r0, r1, #1
     c44:	0064      	lsls	r4, r4, #1
     c46:	f010 0f01 	tst.w	r0, #1
     c4a:	bf18      	it	ne
     c4c:	f084 0401 	eorne.w	r4, r4, #1
     c50:	0064      	lsls	r4, r4, #1
     c52:	f002 02ff 	and.w	r2, r2, #255	; 0xff
     c56:	f010 0f02 	tst.w	r0, #2
     c5a:	9915      	ldr	r1, [sp, #84]	; 0x54
     c5c:	bf18      	it	ne
     c5e:	f084 0401 	eorne.w	r4, r4, #1
     c62:	2a90      	cmp	r2, #144	; 0x90
     c64:	f006 06ff 	and.w	r6, r6, #255	; 0xff
     c68:	910f      	str	r1, [sp, #60]	; 0x3c
     c6a:	d974      	bls.n	d56 <main+0x6ae>
     c6c:	2b90      	cmp	r3, #144	; 0x90
     c6e:	f200 80d1 	bhi.w	e14 <main+0x76c>
     c72:	2b6d      	cmp	r3, #109	; 0x6d
     c74:	f240 80bf 	bls.w	df6 <main+0x74e>
     c78:	2000      	movs	r0, #0
     c7a:	2101      	movs	r1, #1
     c7c:	f645 7c90 	movw	ip, #24464	; 0x5f90
     c80:	f2c0 0c01 	movt	ip, #1
     c84:	460a      	mov	r2, r1
     c86:	4603      	mov	r3, r0
     c88:	f8cd c004 	str.w	ip, [sp, #4]
     c8c:	f8cd c000 	str.w	ip, [sp]
     c90:	f7ff fccc 	bl	62c <setMotorPin>
     c94:	2e90      	cmp	r6, #144	; 0x90
     c96:	d967      	bls.n	d68 <main+0x6c0>
     c98:	2c90      	cmp	r4, #144	; 0x90
     c9a:	f200 80dc 	bhi.w	e56 <main+0x7ae>
     c9e:	2c6d      	cmp	r4, #109	; 0x6d
     ca0:	4631      	mov	r1, r6
     ca2:	4623      	mov	r3, r4
     ca4:	f04f 30ff 	mov.w	r0, #4294967295
     ca8:	f200 80e5 	bhi.w	e76 <main+0x7ce>
     cac:	2201      	movs	r2, #1
     cae:	f7ff fbf7 	bl	4a0 <setServoPin>
     cb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     cb4:	0916      	lsrs	r6, r2, #4
     cb6:	f006 040f 	and.w	r4, r6, #15
     cba:	2c0b      	cmp	r4, #11
     cbc:	f47f ae9c 	bne.w	9f8 <main+0x350>
     cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
     cc2:	6808      	ldr	r0, [r1, #0]
     cc4:	2800      	cmp	r0, #0
     cc6:	f47f ae97 	bne.w	9f8 <main+0x350>
     cca:	9808      	ldr	r0, [sp, #32]
     ccc:	2301      	movs	r3, #1
     cce:	6804      	ldr	r4, [r0, #0]
     cd0:	f8da 6000 	ldr.w	r6, [sl]
     cd4:	6023      	str	r3, [r4, #0]
     cd6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     cd8:	2205      	movs	r2, #5
     cda:	6023      	str	r3, [r4, #0]
     cdc:	f641 70f4 	movw	r0, #8180	; 0x1ff4
     ce0:	3365      	adds	r3, #101	; 0x65
     ce2:	f240 0198 	movw	r1, #152	; 0x98
     ce6:	6032      	str	r2, [r6, #0]
     ce8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     cec:	f2c2 0100 	movt	r1, #8192	; 0x2000
     cf0:	703b      	strb	r3, [r7, #0]
     cf2:	f000 f919 	bl	f28 <MSS_UART_polled_tx_string>
     cf6:	f000 f8db 	bl	eb0 <MYTIMER_enable>
     cfa:	e67d      	b.n	9f8 <main+0x350>
     cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     cfe:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
     d02:	f8a3 c000 	strh.w	ip, [r3]
     d06:	e6ae      	b.n	a66 <main+0x3be>
     d08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
     d0a:	f240 12f3 	movw	r2, #499	; 0x1f3
     d0e:	f8b6 e000 	ldrh.w	lr, [r6]
     d12:	4596      	cmp	lr, r2
     d14:	d90b      	bls.n	d2e <main+0x686>
     d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     d18:	f8b3 c000 	ldrh.w	ip, [r3]
     d1c:	4594      	cmp	ip, r2
     d1e:	d906      	bls.n	d2e <main+0x686>
     d20:	990d      	ldr	r1, [sp, #52]	; 0x34
     d22:	880c      	ldrh	r4, [r1, #0]
     d24:	4294      	cmp	r4, r2
     d26:	d902      	bls.n	d2e <main+0x686>
     d28:	4290      	cmp	r0, r2
     d2a:	f63f ae9c 	bhi.w	a66 <main+0x3be>
     d2e:	f04f 0e61 	mov.w	lr, #97	; 0x61
     d32:	f641 70f4 	movw	r0, #8180	; 0x1ff4
     d36:	f240 0198 	movw	r1, #152	; 0x98
     d3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     d3e:	f2c2 0100 	movt	r1, #8192	; 0x2000
     d42:	f887 e000 	strb.w	lr, [r7]
     d46:	f000 f8ef 	bl	f28 <MSS_UART_polled_tx_string>
     d4a:	f8b8 2000 	ldrh.w	r2, [r8]
     d4e:	1e50      	subs	r0, r2, #1
     d50:	f8a8 0000 	strh.w	r0, [r8]
     d54:	e687      	b.n	a66 <main+0x3be>
     d56:	2a6d      	cmp	r2, #109	; 0x6d
     d58:	d861      	bhi.n	e1e <main+0x776>
     d5a:	2b90      	cmp	r3, #144	; 0x90
     d5c:	d85a      	bhi.n	e14 <main+0x76c>
     d5e:	2b6d      	cmp	r3, #109	; 0x6d
     d60:	d949      	bls.n	df6 <main+0x74e>
     d62:	2001      	movs	r0, #1
     d64:	2100      	movs	r1, #0
     d66:	e789      	b.n	c7c <main+0x5d4>
     d68:	2e6d      	cmp	r6, #109	; 0x6d
     d6a:	d869      	bhi.n	e40 <main+0x798>
     d6c:	2c90      	cmp	r4, #144	; 0x90
     d6e:	d87a      	bhi.n	e66 <main+0x7be>
     d70:	2c6d      	cmp	r4, #109	; 0x6d
     d72:	f200 8084 	bhi.w	e7e <main+0x7d6>
     d76:	2001      	movs	r0, #1
     d78:	4631      	mov	r1, r6
     d7a:	4623      	mov	r3, r4
     d7c:	4602      	mov	r2, r0
     d7e:	f7ff fb8f 	bl	4a0 <setServoPin>
     d82:	e796      	b.n	cb2 <main+0x60a>
     d84:	2101      	movs	r1, #1
     d86:	4630      	mov	r0, r6
     d88:	f000 fe30 	bl	19ec <MSS_GPIO_set_output>
     d8c:	f242 0044 	movw	r0, #8260	; 0x2044
     d90:	f2c2 0000 	movt	r0, #8192	; 0x2000
     d94:	4631      	mov	r1, r6
     d96:	f000 fba1 	bl	14dc <MSS_SPI_clear_slave_select>
     d9a:	4630      	mov	r0, r6
     d9c:	4631      	mov	r1, r6
     d9e:	4632      	mov	r2, r6
     da0:	4633      	mov	r3, r6
     da2:	4627      	mov	r7, r4
     da4:	9600      	str	r6, [sp, #0]
     da6:	9601      	str	r6, [sp, #4]
     da8:	f7ff fc40 	bl	62c <setMotorPin>
     dac:	4630      	mov	r0, r6
     dae:	4631      	mov	r1, r6
     db0:	4632      	mov	r2, r6
     db2:	4633      	mov	r3, r6
     db4:	f7ff fb74 	bl	4a0 <setServoPin>
     db8:	f897 c000 	ldrb.w	ip, [r7]
     dbc:	4654      	mov	r4, sl
     dbe:	f1bc 0f70 	cmp.w	ip, #112	; 0x70
     dc2:	d006      	beq.n	dd2 <main+0x72a>
     dc4:	6822      	ldr	r2, [r4, #0]
     dc6:	2105      	movs	r1, #5
     dc8:	6011      	str	r1, [r2, #0]
     dca:	4630      	mov	r0, r6
     dcc:	b029      	add	sp, #164	; 0xa4
     dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dd2:	1c70      	adds	r0, r6, #1
     dd4:	17c3      	asrs	r3, r0, #31
     dd6:	00f5      	lsls	r5, r6, #3
     dd8:	0f9f      	lsrs	r7, r3, #30
     dda:	6822      	ldr	r2, [r4, #0]
     ddc:	19c6      	adds	r6, r0, r7
     dde:	1c69      	adds	r1, r5, #1
     de0:	f24f 0080 	movw	r0, #61568	; 0xf080
     de4:	f006 0503 	and.w	r5, r6, #3
     de8:	6011      	str	r1, [r2, #0]
     dea:	f2c0 20fa 	movt	r0, #762	; 0x2fa
     dee:	1bee      	subs	r6, r5, r7
     df0:	f7ff fc40 	bl	674 <delay>
     df4:	e7ed      	b.n	dd2 <main+0x72a>
     df6:	f643 0c80 	movw	ip, #14464	; 0x3880
     dfa:	2001      	movs	r0, #1
     dfc:	2100      	movs	r1, #0
     dfe:	f2c0 0c01 	movt	ip, #1
     e02:	4602      	mov	r2, r0
     e04:	460b      	mov	r3, r1
     e06:	f8cd c004 	str.w	ip, [sp, #4]
     e0a:	f8cd c000 	str.w	ip, [sp]
     e0e:	f7ff fc0d 	bl	62c <setMotorPin>
     e12:	e73f      	b.n	c94 <main+0x5ec>
     e14:	2000      	movs	r0, #0
     e16:	2101      	movs	r1, #1
     e18:	f64e 2c60 	movw	ip, #60000	; 0xea60
     e1c:	e7f1      	b.n	e02 <main+0x75a>
     e1e:	2b90      	cmp	r3, #144	; 0x90
     e20:	d8f8      	bhi.n	e14 <main+0x76c>
     e22:	2b6d      	cmp	r3, #109	; 0x6d
     e24:	d9e7      	bls.n	df6 <main+0x74e>
     e26:	f04f 0e00 	mov.w	lr, #0
     e2a:	4670      	mov	r0, lr
     e2c:	4671      	mov	r1, lr
     e2e:	4672      	mov	r2, lr
     e30:	4673      	mov	r3, lr
     e32:	f8cd e000 	str.w	lr, [sp]
     e36:	f8cd e004 	str.w	lr, [sp, #4]
     e3a:	f7ff fbf7 	bl	62c <setMotorPin>
     e3e:	e729      	b.n	c94 <main+0x5ec>
     e40:	2c90      	cmp	r4, #144	; 0x90
     e42:	d82a      	bhi.n	e9a <main+0x7f2>
     e44:	2c6d      	cmp	r4, #109	; 0x6d
     e46:	d821      	bhi.n	e8c <main+0x7e4>
     e48:	4631      	mov	r1, r6
     e4a:	4623      	mov	r3, r4
     e4c:	2000      	movs	r0, #0
     e4e:	2201      	movs	r2, #1
     e50:	f7ff fb26 	bl	4a0 <setServoPin>
     e54:	e72d      	b.n	cb2 <main+0x60a>
     e56:	f04f 30ff 	mov.w	r0, #4294967295
     e5a:	4631      	mov	r1, r6
     e5c:	4623      	mov	r3, r4
     e5e:	4602      	mov	r2, r0
     e60:	f7ff fb1e 	bl	4a0 <setServoPin>
     e64:	e725      	b.n	cb2 <main+0x60a>
     e66:	4631      	mov	r1, r6
     e68:	4623      	mov	r3, r4
     e6a:	2001      	movs	r0, #1
     e6c:	f04f 32ff 	mov.w	r2, #4294967295
     e70:	f7ff fb16 	bl	4a0 <setServoPin>
     e74:	e71d      	b.n	cb2 <main+0x60a>
     e76:	2200      	movs	r2, #0
     e78:	f7ff fb12 	bl	4a0 <setServoPin>
     e7c:	e719      	b.n	cb2 <main+0x60a>
     e7e:	4631      	mov	r1, r6
     e80:	4623      	mov	r3, r4
     e82:	2001      	movs	r0, #1
     e84:	2200      	movs	r2, #0
     e86:	f7ff fb0b 	bl	4a0 <setServoPin>
     e8a:	e712      	b.n	cb2 <main+0x60a>
     e8c:	2000      	movs	r0, #0
     e8e:	4631      	mov	r1, r6
     e90:	4623      	mov	r3, r4
     e92:	4602      	mov	r2, r0
     e94:	f7ff fb04 	bl	4a0 <setServoPin>
     e98:	e70b      	b.n	cb2 <main+0x60a>
     e9a:	4631      	mov	r1, r6
     e9c:	4623      	mov	r3, r4
     e9e:	2000      	movs	r0, #0
     ea0:	f04f 32ff 	mov.w	r2, #4294967295
     ea4:	f7ff fafc 	bl	4a0 <setServoPin>
     ea8:	e703      	b.n	cb2 <main+0x60a>
     eaa:	bf00      	nop

00000eac <MYTIMER_init>:
     eac:	4770      	bx	lr
     eae:	bf00      	nop

00000eb0 <MYTIMER_enable>:
     eb0:	f240 2300 	movw	r3, #512	; 0x200
     eb4:	f2c4 0305 	movt	r3, #16389	; 0x4005
     eb8:	6898      	ldr	r0, [r3, #8]
     eba:	f040 0201 	orr.w	r2, r0, #1
     ebe:	609a      	str	r2, [r3, #8]
     ec0:	4770      	bx	lr
     ec2:	bf00      	nop

00000ec4 <MYTIMER_disable>:
     ec4:	f240 2300 	movw	r3, #512	; 0x200
     ec8:	f2c4 0305 	movt	r3, #16389	; 0x4005
     ecc:	6898      	ldr	r0, [r3, #8]
     ece:	f020 0201 	bic.w	r2, r0, #1
     ed2:	609a      	str	r2, [r3, #8]
     ed4:	4770      	bx	lr
     ed6:	bf00      	nop

00000ed8 <MYTIMER_setOverflowVal>:
     ed8:	f240 2300 	movw	r3, #512	; 0x200
     edc:	f2c4 0305 	movt	r3, #16389	; 0x4005
     ee0:	6018      	str	r0, [r3, #0]
     ee2:	4770      	bx	lr

00000ee4 <DELAY_init>:
     ee4:	4770      	bx	lr
     ee6:	bf00      	nop

00000ee8 <DELAY_enable>:
     ee8:	f240 3300 	movw	r3, #768	; 0x300
     eec:	f2c4 0305 	movt	r3, #16389	; 0x4005
     ef0:	6898      	ldr	r0, [r3, #8]
     ef2:	f040 0201 	orr.w	r2, r0, #1
     ef6:	609a      	str	r2, [r3, #8]
     ef8:	4770      	bx	lr
     efa:	bf00      	nop

00000efc <DELAY_disable>:
     efc:	f240 3300 	movw	r3, #768	; 0x300
     f00:	f2c4 0305 	movt	r3, #16389	; 0x4005
     f04:	6898      	ldr	r0, [r3, #8]
     f06:	f020 0201 	bic.w	r2, r0, #1
     f0a:	609a      	str	r2, [r3, #8]
     f0c:	4770      	bx	lr
     f0e:	bf00      	nop

00000f10 <DELAY_setOverflowVal>:
     f10:	f240 3300 	movw	r3, #768	; 0x300
     f14:	f2c4 0305 	movt	r3, #16389	; 0x4005
     f18:	6018      	str	r0, [r3, #0]
     f1a:	4770      	bx	lr

00000f1c <DELAY_getCounterVal>:
     f1c:	f240 3304 	movw	r3, #772	; 0x304
     f20:	f2c4 0305 	movt	r3, #16389	; 0x4005
     f24:	6818      	ldr	r0, [r3, #0]
     f26:	4770      	bx	lr

00000f28 <MSS_UART_polled_tx_string>:
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( p_sz_string != ( (uint8_t *)0 ) );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
     f28:	f242 031c 	movw	r3, #8220	; 0x201c
     f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f30:	4298      	cmp	r0, r3
MSS_UART_polled_tx_string
(
    mss_uart_instance_t * this_uart,
    const uint8_t * p_sz_string
)
{
     f32:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( p_sz_string != ( (uint8_t *)0 ) );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
     f36:	d008      	beq.n	f4a <MSS_UART_polled_tx_string+0x22>
     f38:	f641 72f4 	movw	r2, #8180	; 0x1ff4
     f3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f40:	4290      	cmp	r0, r2
     f42:	d002      	beq.n	f4a <MSS_UART_polled_tx_string+0x22>
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
            }
        }
    }
}
     f44:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
     f48:	4770      	bx	lr
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( p_sz_string != ( (uint8_t *)0 ) );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
     f4a:	2900      	cmp	r1, #0
     f4c:	d0fa      	beq.n	f44 <MSS_UART_polled_tx_string+0x1c>
          ( p_sz_string != ( (uint8_t *)0 ) ) )
    {
        /* Get the first data byte from the input buffer */
        data_byte = (uint_fast8_t)p_sz_string[char_idx];
     f4e:	780d      	ldrb	r5, [r1, #0]

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while ( 0U != data_byte )
     f50:	2d00      	cmp	r5, #0
     f52:	d0f7      	beq.n	f44 <MSS_UART_polled_tx_string+0x1c>
     f54:	7a82      	ldrb	r2, [r0, #10]
        {
            /* Wait until TX FIFO is empty. */
            do {
                status = this_uart->hw_reg->LSR;
     f56:	6804      	ldr	r4, [r0, #0]
     f58:	f04f 0c00 	mov.w	ip, #0
     f5c:	7d23      	ldrb	r3, [r4, #20]
                this_uart->status |= status;
     f5e:	431a      	orrs	r2, r3
            } while ( !( status & MSS_UART_THRE ) );
     f60:	f013 0f20 	tst.w	r3, #32
     f64:	d0fa      	beq.n	f5c <MSS_UART_polled_tx_string+0x34>
     f66:	7282      	strb	r2, [r0, #10]

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
     f68:	b925      	cbnz	r5, f74 <MSS_UART_polled_tx_string+0x4c>
     f6a:	4663      	mov	r3, ip

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while ( 0U != data_byte )
     f6c:	2d00      	cmp	r5, #0
     f6e:	d0e9      	beq.n	f44 <MSS_UART_polled_tx_string+0x1c>
     f70:	469c      	mov	ip, r3
     f72:	e7f3      	b.n	f5c <MSS_UART_polled_tx_string+0x34>

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
     f74:	f8d0 a000 	ldr.w	sl, [r0]
     f78:	2600      	movs	r6, #0
     f7a:	eb01 080c 	add.w	r8, r1, ip
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
     f7e:	b2ed      	uxtb	r5, r5
                ++fill_size;
     f80:	3601      	adds	r6, #1
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
     f82:	f88a 5000 	strb.w	r5, [sl]
                ++fill_size;
                char_idx++;
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
     f86:	f818 5006 	ldrb.w	r5, [r8, r6]
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
                ++fill_size;
     f8a:	eb06 030c 	add.w	r3, r6, ip

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
     f8e:	1e2f      	subs	r7, r5, #0
     f90:	bf18      	it	ne
     f92:	2701      	movne	r7, #1
     f94:	2e0f      	cmp	r6, #15
     f96:	bf8c      	ite	hi
     f98:	2700      	movhi	r7, #0
     f9a:	f007 0701 	andls.w	r7, r7, #1
     f9e:	2f00      	cmp	r7, #0
     fa0:	d0e4      	beq.n	f6c <MSS_UART_polled_tx_string+0x44>
     fa2:	e7ec      	b.n	f7e <MSS_UART_polled_tx_string+0x56>

00000fa4 <MSS_UART_get_rx>:

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
     fa4:	f242 031c 	movw	r3, #8220	; 0x201c
     fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     fac:	4298      	cmp	r0, r3
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
     fae:	b470      	push	{r4, r5, r6}

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
     fb0:	d009      	beq.n	fc6 <MSS_UART_get_rx+0x22>
     fb2:	f641 7cf4 	movw	ip, #8180	; 0x1ff4
     fb6:	f2c2 0c00 	movt	ip, #8192	; 0x2000
     fba:	4560      	cmp	r0, ip
     fbc:	d003      	beq.n	fc6 <MSS_UART_get_rx+0x22>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
     fbe:	2300      	movs	r3, #0
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
}
     fc0:	4618      	mov	r0, r3
     fc2:	bc70      	pop	{r4, r5, r6}
     fc4:	4770      	bx	lr

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
     fc6:	1e0b      	subs	r3, r1, #0
     fc8:	bf18      	it	ne
     fca:	2301      	movne	r3, #1
     fcc:	2a00      	cmp	r2, #0
     fce:	bf0c      	ite	eq
     fd0:	2300      	moveq	r3, #0
     fd2:	f003 0301 	andne.w	r3, r3, #1
     fd6:	2b00      	cmp	r3, #0
     fd8:	d0f1      	beq.n	fbe <MSS_UART_get_rx+0x1a>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
     fda:	6804      	ldr	r4, [r0, #0]
        this_uart->status |= status;
     fdc:	f890 c00a 	ldrb.w	ip, [r0, #10]
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
     fe0:	7d23      	ldrb	r3, [r4, #20]
        this_uart->status |= status;
     fe2:	ea43 0c0c 	orr.w	ip, r3, ip

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
     fe6:	f013 0f01 	tst.w	r3, #1

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;
     fea:	f880 c00a 	strb.w	ip, [r0, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
     fee:	d0e6      	beq.n	fbe <MSS_UART_get_rx+0x1a>
     ff0:	2300      	movs	r3, #0
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
     ff2:	7825      	ldrb	r5, [r4, #0]
     ff4:	54cd      	strb	r5, [r1, r3]
            ++rx_size;
            status = this_uart->hw_reg->LSR;
     ff6:	6804      	ldr	r4, [r0, #0]
            this_uart->status |= status;
     ff8:	7a86      	ldrb	r6, [r0, #10]
        while (( (status & MSS_UART_DATA_READY) != 0U) &&
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
            ++rx_size;
            status = this_uart->hw_reg->LSR;
     ffa:	f894 c014 	ldrb.w	ip, [r4, #20]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
            ++rx_size;
     ffe:	3301      	adds	r3, #1
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
    1000:	ea4c 0606 	orr.w	r6, ip, r6
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
    1004:	429a      	cmp	r2, r3
    1006:	bf94      	ite	ls
    1008:	2500      	movls	r5, #0
    100a:	f00c 0501 	andhi.w	r5, ip, #1
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
    100e:	7286      	strb	r6, [r0, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
    1010:	2d00      	cmp	r5, #0
    1012:	d1ee      	bne.n	ff2 <MSS_UART_get_rx+0x4e>
    1014:	e7d4      	b.n	fc0 <MSS_UART_get_rx+0x1c>
    1016:	bf00      	nop

00001018 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
    1018:	b508      	push	{r3, lr}
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    101a:	f242 031c 	movw	r3, #8220	; 0x201c
    101e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1022:	4298      	cmp	r0, r3
    1024:	d006      	beq.n	1034 <MSS_UART_isr+0x1c>
    1026:	f641 71f4 	movw	r1, #8180	; 0x1ff4
    102a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    102e:	4288      	cmp	r0, r1
    1030:	d000      	beq.n	1034 <MSS_UART_isr+0x1c>
    1032:	bd08      	pop	{r3, pc}
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
    1034:	6803      	ldr	r3, [r0, #0]
    1036:	7a1a      	ldrb	r2, [r3, #8]

        switch ( iirf )
    1038:	f002 0c0f 	and.w	ip, r2, #15
    103c:	f1bc 0f0c 	cmp.w	ip, #12
    1040:	d8f7      	bhi.n	1032 <MSS_UART_isr+0x1a>
    1042:	a201      	add	r2, pc, #4	; (adr r2, 1048 <MSS_UART_isr+0x30>)
    1044:	f852 f02c 	ldr.w	pc, [r2, ip, lsl #2]
    1048:	00001099 	.word	0x00001099
    104c:	00001033 	.word	0x00001033
    1050:	00001091 	.word	0x00001091
    1054:	00001033 	.word	0x00001033
    1058:	00001087 	.word	0x00001087
    105c:	00001033 	.word	0x00001033
    1060:	0000107d 	.word	0x0000107d
    1064:	00001033 	.word	0x00001033
    1068:	00001033 	.word	0x00001033
    106c:	00001033 	.word	0x00001033
    1070:	00001033 	.word	0x00001033
    1074:	00001033 	.word	0x00001033
    1078:	00001087 	.word	0x00001087
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
                if ( NULL_HANDLER != this_uart->linests_handler )
    107c:	6983      	ldr	r3, [r0, #24]
    107e:	2b00      	cmp	r3, #0
    1080:	d0d7      	beq.n	1032 <MSS_UART_isr+0x1a>
                {
                   (*(this_uart->linests_handler))( this_uart );
    1082:	4798      	blx	r3
    1084:	e7d5      	b.n	1032 <MSS_UART_isr+0x1a>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
                if ( NULL_HANDLER != this_uart->rx_handler )
    1086:	69c3      	ldr	r3, [r0, #28]
    1088:	2b00      	cmp	r3, #0
    108a:	d0d2      	beq.n	1032 <MSS_UART_isr+0x1a>
                {
                    (*(this_uart->rx_handler))( this_uart );
    108c:	4798      	blx	r3
    108e:	bd08      	pop	{r3, pc}
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
                if ( NULL_HANDLER != this_uart->tx_handler )
    1090:	6a03      	ldr	r3, [r0, #32]
    1092:	2b00      	cmp	r3, #0
    1094:	d1fa      	bne.n	108c <MSS_UART_isr+0x74>
    1096:	e7cc      	b.n	1032 <MSS_UART_isr+0x1a>
        switch ( iirf )
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
                if( NULL_HANDLER != this_uart->modemsts_handler )
    1098:	6a43      	ldr	r3, [r0, #36]	; 0x24
    109a:	2b00      	cmp	r3, #0
    109c:	d1f6      	bne.n	108c <MSS_UART_isr+0x74>
    109e:	e7c8      	b.n	1032 <MSS_UART_isr+0x1a>

000010a0 <default_tx_handler>:

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    10a0:	f242 031c 	movw	r3, #8220	; 0x201c
    10a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    10a8:	4298      	cmp	r0, r3
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
    10aa:	b470      	push	{r4, r5, r6}

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    10ac:	d007      	beq.n	10be <default_tx_handler+0x1e>
    10ae:	f641 71f4 	movw	r1, #8180	; 0x1ff4
    10b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    10b6:	4288      	cmp	r0, r1
    10b8:	d001      	beq.n	10be <default_tx_handler+0x1e>
            this_uart->tx_buff_size = TX_COMPLETE;
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
        }
    }
}
    10ba:	bc70      	pop	{r4, r5, r6}
    10bc:	4770      	bx	lr
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
    10be:	68c4      	ldr	r4, [r0, #12]
    10c0:	2c00      	cmp	r4, #0
    10c2:	d0fa      	beq.n	10ba <default_tx_handler+0x1a>
        ( 0U < this_uart->tx_buff_size ) )
    10c4:	6903      	ldr	r3, [r0, #16]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d0f7      	beq.n	10ba <default_tx_handler+0x1a>
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
    10ca:	6801      	ldr	r1, [r0, #0]
        this_uart->status |= status;
    10cc:	f890 c00a 	ldrb.w	ip, [r0, #10]
    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
    10d0:	7d0a      	ldrb	r2, [r1, #20]
        this_uart->status |= status;
    10d2:	ea42 0c0c 	orr.w	ip, r2, ip

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
    10d6:	f012 0f20 	tst.w	r2, #32
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;
    10da:	f880 c00a 	strb.w	ip, [r0, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
    10de:	6942      	ldr	r2, [r0, #20]
    10e0:	d02a      	beq.n	1138 <default_tx_handler+0x98>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
    10e2:	1a9d      	subs	r5, r3, r2

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
    10e4:	2d0f      	cmp	r5, #15
    10e6:	d92f      	bls.n	1148 <default_tx_handler+0xa8>
    10e8:	2510      	movs	r5, #16
    10ea:	18a4      	adds	r4, r4, r2

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    10ec:	7826      	ldrb	r6, [r4, #0]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    10ee:	2301      	movs	r3, #1
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
    10f0:	3201      	adds	r2, #1
    10f2:	f105 3cff 	add.w	ip, r5, #4294967295
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    10f6:	42ab      	cmp	r3, r5
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    10f8:	700e      	strb	r6, [r1, #0]
    10fa:	ea0c 0603 	and.w	r6, ip, r3
                ++this_uart->tx_idx;
    10fe:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1100:	d219      	bcs.n	1136 <default_tx_handler+0x96>
    1102:	b146      	cbz	r6, 1116 <default_tx_handler+0x76>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    1104:	f894 c001 	ldrb.w	ip, [r4, #1]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1108:	2302      	movs	r3, #2
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
    110a:	3201      	adds	r2, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    110c:	42ab      	cmp	r3, r5
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    110e:	f881 c000 	strb.w	ip, [r1]
                ++this_uart->tx_idx;
    1112:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1114:	d20f      	bcs.n	1136 <default_tx_handler+0x96>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    1116:	f814 c003 	ldrb.w	ip, [r4, r3]
                ++this_uart->tx_idx;
    111a:	3201      	adds	r2, #1

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    111c:	f881 c000 	strb.w	ip, [r1]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1120:	3301      	adds	r3, #1
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
    1122:	6142      	str	r2, [r0, #20]

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    1124:	f814 c003 	ldrb.w	ip, [r4, r3]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1128:	3301      	adds	r3, #1
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
    112a:	3201      	adds	r2, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    112c:	42ab      	cmp	r3, r5
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    112e:	f881 c000 	strb.w	ip, [r1]
                ++this_uart->tx_idx;
    1132:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1134:	d3ef      	bcc.n	1116 <default_tx_handler+0x76>
    1136:	6903      	ldr	r3, [r0, #16]
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
    1138:	429a      	cmp	r2, r3
    113a:	d1be      	bne.n	10ba <default_tx_handler+0x1a>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
    113c:	6841      	ldr	r1, [r0, #4]
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
        {
            this_uart->tx_buff_size = TX_COMPLETE;
    113e:	2300      	movs	r3, #0
    1140:	6103      	str	r3, [r0, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
    1142:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    1146:	e7b8      	b.n	10ba <default_tx_handler+0x1a>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1148:	2d00      	cmp	r5, #0
    114a:	d1ce      	bne.n	10ea <default_tx_handler+0x4a>
    114c:	e7f4      	b.n	1138 <default_tx_handler+0x98>
    114e:	bf00      	nop

00001150 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
    1150:	4668      	mov	r0, sp
    1152:	f020 0107 	bic.w	r1, r0, #7
    1156:	468d      	mov	sp, r1
    1158:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart0 );
    115a:	f242 001c 	movw	r0, #8220	; 0x201c
    115e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1162:	f7ff ff59 	bl	1018 <MSS_UART_isr>
    1166:	f24e 1300 	movw	r3, #57600	; 0xe100
    116a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    116e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1172:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART0_IRQn );
}
    1176:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    117a:	4685      	mov	sp, r0
    117c:	4770      	bx	lr
    117e:	bf00      	nop

00001180 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
    1180:	4668      	mov	r0, sp
    1182:	f020 0107 	bic.w	r1, r0, #7
    1186:	468d      	mov	sp, r1
    1188:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart1 );
    118a:	f641 70f4 	movw	r0, #8180	; 0x1ff4
    118e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1192:	f7ff ff41 	bl	1018 <MSS_UART_isr>
    1196:	f24e 1300 	movw	r3, #57600	; 0xe100
    119a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    119e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    11a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART1_IRQn );
}
    11a6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    11aa:	4685      	mov	sp, r0
    11ac:	4770      	bx	lr
    11ae:	bf00      	nop

000011b0 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
    11b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11b2:	4604      	mov	r4, r0
    11b4:	460d      	mov	r5, r1
    11b6:	4616      	mov	r6, r2
    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
    11b8:	f000 fcb4 	bl	1b24 <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
    11bc:	f242 031c 	movw	r3, #8220	; 0x201c
    11c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    11c4:	429c      	cmp	r4, r3
        this_uart->irqn = UART0_IRQn;

        pclk_freq = g_FrequencyPCLK0;

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
    11c6:	f242 0300 	movw	r3, #8192	; 0x2000
    11ca:	f2ce 0304 	movt	r3, #57348	; 0xe004
    11ce:	6b18      	ldr	r0, [r3, #48]	; 0x30

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();

    if ( this_uart == &g_mss_uart0 )
    11d0:	d053      	beq.n	127a <MSS_UART_init+0xca>
    {
        this_uart->hw_reg = UART1;
        this_uart->hw_reg_bit = UART1_BITBAND;
        this_uart->irqn = UART1_IRQn;

        pclk_freq = g_FrequencyPCLK1;
    11d2:	f240 0228 	movw	r2, #40	; 0x28
    11d6:	f2c2 0200 	movt	r2, #8192	; 0x2000

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
    11da:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    11de:	f24e 1100 	movw	r1, #57600	; 0xe100
    {
        this_uart->hw_reg = UART1;
        this_uart->hw_reg_bit = UART1_BITBAND;
        this_uart->irqn = UART1_IRQn;

        pclk_freq = g_FrequencyPCLK1;
    11e2:	6817      	ldr	r7, [r2, #0]
    11e4:	f2ce 0100 	movt	r1, #57344	; 0xe000

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
    11e8:	6318      	str	r0, [r3, #48]	; 0x30
    11ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
    11ee:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
    11f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
    11f4:	f240 0100 	movw	r1, #0
        this_uart->hw_reg_bit = UART1_BITBAND;
    11f8:	f240 0000 	movw	r0, #0
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
    11fc:	f2c4 0101 	movt	r1, #16385	; 0x4001
        this_uart->hw_reg_bit = UART1_BITBAND;
    1200:	f2c4 2020 	movt	r0, #16928	; 0x4220
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
    1204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    }
    else
    {
        this_uart->hw_reg = UART1;
        this_uart->hw_reg_bit = UART1_BITBAND;
        this_uart->irqn = UART1_IRQn;
    1208:	f04f 0c0b 	mov.w	ip, #11
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
    120c:	631a      	str	r2, [r3, #48]	; 0x30
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
    120e:	6021      	str	r1, [r4, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
    1210:	6060      	str	r0, [r4, #4]
        this_uart->irqn = UART1_IRQn;
    1212:	f8a4 c008 	strh.w	ip, [r4, #8]
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
    1216:	2300      	movs	r3, #0
    1218:	710b      	strb	r3, [r1, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
    121a:	b16d      	cbz	r5, 1238 <MSS_UART_init+0x88>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
    121c:	fbb7 f5f5 	udiv	r5, r7, r5
        if( baud_value_l & 0x00000008U )
    1220:	f015 0f08 	tst.w	r5, #8
    1224:	d126      	bne.n	1274 <MSS_UART_init+0xc4>
            baud_value_l = (baud_value_l >> 4U) + 1U;        
        }
        else
        {
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
    1226:	092d      	lsrs	r5, r5, #4
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
        if( baud_value_l <= (uint32_t)UINT16_MAX)
    1228:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    122c:	d204      	bcs.n	1238 <MSS_UART_init+0x88>
        {
            baud_value = (uint16_t)baud_value_l;
    122e:	b2aa      	uxth	r2, r5
    1230:	fa5f fc82 	uxtb.w	ip, r2
    1234:	0a17      	lsrs	r7, r2, #8
    1236:	e002      	b.n	123e <MSS_UART_init+0x8e>
    1238:	f04f 0c01 	mov.w	ip, #1
    123c:	2700      	movs	r7, #0
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
    123e:	2201      	movs	r2, #1
    this_uart->tx_buffer = (const uint8_t *)0;
    this_uart->tx_idx = 0U;

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
    this_uart->tx_handler       = default_tx_handler;
    1240:	f241 05a1 	movw	r5, #4257	; 0x10a1
            baud_value = (uint16_t)baud_value_l;
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
    1244:	f8c0 219c 	str.w	r2, [r0, #412]	; 0x19c
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
    1248:	2300      	movs	r3, #0
    this_uart->tx_buffer = (const uint8_t *)0;
    this_uart->tx_idx = 0U;

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
    this_uart->tx_handler       = default_tx_handler;
    124a:	f2c0 0500 	movt	r5, #0
    this_uart->hw_reg->LCR = line_config;

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
    124e:	220e      	movs	r2, #14
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
    1250:	710f      	strb	r7, [r1, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
    1252:	f881 c000 	strb.w	ip, [r1]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
    1256:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
    125a:	730e      	strb	r6, [r1, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
    125c:	720a      	strb	r2, [r1, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
    125e:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
    this_uart->tx_buffer = (const uint8_t *)0;
    this_uart->tx_idx = 0U;

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
    this_uart->tx_handler       = default_tx_handler;
    1262:	6225      	str	r5, [r4, #32]
    this_uart->linests_handler  = NULL_HANDLER;
    this_uart->modemsts_handler = NULL_HANDLER;

    /* Initialize the sticky status */
    this_uart->status = 0U;
    1264:	72a3      	strb	r3, [r4, #10]
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
    1266:	6123      	str	r3, [r4, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
    1268:	60e3      	str	r3, [r4, #12]
    this_uart->tx_idx = 0U;
    126a:	6163      	str	r3, [r4, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
    126c:	61e3      	str	r3, [r4, #28]
    this_uart->tx_handler       = default_tx_handler;
    this_uart->linests_handler  = NULL_HANDLER;
    126e:	61a3      	str	r3, [r4, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
    1270:	6263      	str	r3, [r4, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
}
    1272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
        if( baud_value_l & 0x00000008U )
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
    1274:	092d      	lsrs	r5, r5, #4
    1276:	3501      	adds	r5, #1
    1278:	e7d6      	b.n	1228 <MSS_UART_init+0x78>
    {
        this_uart->hw_reg = UART0;
        this_uart->hw_reg_bit = UART0_BITBAND;
        this_uart->irqn = UART0_IRQn;

        pclk_freq = g_FrequencyPCLK0;
    127a:	f240 0124 	movw	r1, #36	; 0x24
    127e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1282:	f24e 1200 	movw	r2, #57600	; 0xe100
    1286:	680f      	ldr	r7, [r1, #0]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
    1288:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    128c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    1290:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1294:	6318      	str	r0, [r3, #48]	; 0x30
    1296:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
    129a:	6b18      	ldr	r0, [r3, #48]	; 0x30
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();

    if ( this_uart == &g_mss_uart0 )
    {
        this_uart->hw_reg = UART0;
    129c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
    12a0:	f020 0280 	bic.w	r2, r0, #128	; 0x80
    12a4:	631a      	str	r2, [r3, #48]	; 0x30
    SystemCoreClockUpdate();

    if ( this_uart == &g_mss_uart0 )
    {
        this_uart->hw_reg = UART0;
        this_uart->hw_reg_bit = UART0_BITBAND;
    12a6:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
        this_uart->irqn = UART0_IRQn;
    12aa:	f04f 020a 	mov.w	r2, #10
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();

    if ( this_uart == &g_mss_uart0 )
    {
        this_uart->hw_reg = UART0;
    12ae:	6021      	str	r1, [r4, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
    12b0:	6060      	str	r0, [r4, #4]
        this_uart->irqn = UART0_IRQn;
    12b2:	8122      	strh	r2, [r4, #8]
    12b4:	e7af      	b.n	1216 <MSS_UART_init+0x66>
    12b6:	bf00      	nop

000012b8 <recover_from_rx_overflow>:
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    12b8:	f242 02c8 	movw	r2, #8392	; 0x20c8
    12bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
    12c0:	6803      	ldr	r3, [r0, #0]
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    12c2:	4290      	cmp	r0, r2
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    12c4:	f242 0200 	movw	r2, #8192	; 0x2000
    12c8:	f2ce 0204 	movt	r2, #57348	; 0xe004
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
    12cc:	f8d3 c000 	ldr.w	ip, [r3]
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
    12d0:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
    clk_gen = this_spi->hw_reg->CLK_GEN;
    12d4:	699f      	ldr	r7, [r3, #24]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
    12d6:	685e      	ldr	r6, [r3, #4]
    control2 = this_spi->hw_reg->CONTROL2;
    12d8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    packet_size = this_spi->hw_reg->PKTSIZE;
    12da:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    cmd_size = this_spi->hw_reg->CMDSIZE;
    12dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
    12de:	f8d3 801c 	ldr.w	r8, [r3, #28]
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    12e2:	f8d2 a030 	ldr.w	sl, [r2, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    12e6:	f24e 1300 	movw	r3, #57600	; 0xe100
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    12ea:	d02d      	beq.n	1348 <recover_from_rx_overflow+0x90>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
        this_spi->irqn = SPI1_IRQn;
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
    12ec:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
    12f0:	f8c2 a030 	str.w	sl, [r2, #48]	; 0x30
    12f4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    12f8:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    12fc:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    1300:	f8d2 a030 	ldr.w	sl, [r2, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    1304:	f241 0300 	movw	r3, #4096	; 0x1000
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    1308:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
    130c:	f8c2 a030 	str.w	sl, [r2, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    1310:	f2c4 0301 	movt	r3, #16385	; 0x4001
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    1314:	681a      	ldr	r2, [r3, #0]
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
        this_spi->irqn = SPI1_IRQn;
    1316:	f04f 0a0d 	mov.w	sl, #13
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    131a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
        this_spi->irqn = SPI1_IRQn;
    131e:	f8a0 a004 	strh.w	sl, [r0, #4]
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    1322:	601a      	str	r2, [r3, #0]

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    1324:	6003      	str	r3, [r0, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
    1326:	f02c 0001 	bic.w	r0, ip, #1
    this_spi->hw_reg->CONTROL = control_reg;
    132a:	6018      	str	r0, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
    132c:	619f      	str	r7, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
    132e:	605e      	str	r6, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    1330:	681a      	ldr	r2, [r3, #0]
    1332:	f042 0001 	orr.w	r0, r2, #1
    1336:	6018      	str	r0, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
    1338:	629d      	str	r5, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
    133a:	631c      	str	r4, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
    133c:	6359      	str	r1, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
    133e:	f8c3 801c 	str.w	r8, [r3, #28]
}
    1342:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
    1346:	4770      	bx	lr
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    1348:	f44a 7a00 	orr.w	sl, sl, #512	; 0x200
    134c:	f8c2 a030 	str.w	sl, [r2, #48]	; 0x30
    1350:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1354:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    1358:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    135c:	f8d2 a030 	ldr.w	sl, [r2, #48]	; 0x30
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    1360:	f241 0300 	movw	r3, #4096	; 0x1000
        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    1364:	f42a 7a00 	bic.w	sl, sl, #512	; 0x200
    1368:	f8c2 a030 	str.w	sl, [r2, #48]	; 0x30
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    136c:	f2c4 0300 	movt	r3, #16384	; 0x4000
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    1370:	681a      	ldr	r2, [r3, #0]
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;
    1372:	f04f 0a0c 	mov.w	sl, #12
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    1376:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;
    137a:	f8a0 a004 	strh.w	sl, [r0, #4]
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    137e:	601a      	str	r2, [r3, #0]
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    1380:	6003      	str	r3, [r0, #0]
    1382:	e7d0      	b.n	1326 <recover_from_rx_overflow+0x6e>

00001384 <MSS_SPI_configure_master_mode>:
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    1384:	f8b0 c004 	ldrh.w	ip, [r0, #4]
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
    1388:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    138c:	f00c 051f 	and.w	r5, ip, #31
    1390:	2701      	movs	r7, #1
    1392:	40af      	lsls	r7, r5
    1394:	fa0f f48c 	sxth.w	r4, ip
    1398:	0966      	lsrs	r6, r4, #5
    139a:	f24e 1500 	movw	r5, #57600	; 0xe100

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    139e:	6804      	ldr	r4, [r0, #0]
    13a0:	3620      	adds	r6, #32
    13a2:	f2ce 0500 	movt	r5, #57344	; 0xe000
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
    13a6:	f89d 8014 	ldrb.w	r8, [sp, #20]
    13aa:	f845 7026 	str.w	r7, [r5, r6, lsl #2]

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    13ae:	6825      	ldr	r5, [r4, #0]
    13b0:	f025 0601 	bic.w	r6, r5, #1
    13b4:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
    13b6:	6825      	ldr	r5, [r4, #0]
    13b8:	f045 0602 	orr.w	r6, r5, #2
    13bc:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    13be:	6825      	ldr	r5, [r4, #0]
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
    13c0:	2600      	movs	r6, #0

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    13c2:	f045 0501 	orr.w	r5, r5, #1
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
    13c6:	2907      	cmp	r1, #7
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
    13c8:	f880 6080 	strb.w	r6, [r0, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    13cc:	6025      	str	r5, [r4, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
    13ce:	d81a      	bhi.n	1406 <MSS_SPI_configure_master_mode+0x82>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
    13d0:	42b2      	cmp	r2, r6
    13d2:	bf14      	ite	ne
    13d4:	2400      	movne	r4, #0
    13d6:	2401      	moveq	r4, #1
    13d8:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
    13dc:	bf08      	it	eq
    13de:	f044 0401 	orreq.w	r4, r4, #1
    13e2:	b314      	cbz	r4, 142a <MSS_SPI_configure_master_mode+0xa6>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
    13e4:	f240 1c02 	movw	ip, #258	; 0x102
    13e8:	3106      	adds	r1, #6
    13ea:	f2c2 4c00 	movt	ip, #9216	; 0x2400
    13ee:	ea42 040c 	orr.w	r4, r2, ip
    13f2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    13f6:	6054      	str	r4, [r2, #4]
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
    13f8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
    13fc:	724b      	strb	r3, [r1, #9]
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
    13fe:	f881 8008 	strb.w	r8, [r1, #8]
    1402:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1406:	f00c 031f 	and.w	r3, ip, #31
    140a:	2201      	movs	r2, #1
    140c:	fa12 f003 	lsls.w	r0, r2, r3
    1410:	fa0f f18c 	sxth.w	r1, ip
    1414:	f24e 1300 	movw	r3, #57600	; 0xe100
    1418:	ea4f 1c51 	mov.w	ip, r1, lsr #5
    141c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1420:	f843 002c 	str.w	r0, [r3, ip, lsl #2]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
}
    1424:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    1428:	4770      	bx	lr
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
    142a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    142e:	bf14      	ite	ne
    1430:	2400      	movne	r4, #0
    1432:	2401      	moveq	r4, #1
    1434:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
    1438:	bf08      	it	eq
    143a:	f044 0401 	orreq.w	r4, r4, #1
    143e:	2c00      	cmp	r4, #0
    1440:	d1d0      	bne.n	13e4 <MSS_SPI_configure_master_mode+0x60>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
    1442:	f240 1402 	movw	r4, #258	; 0x102
    1446:	3106      	adds	r1, #6
    1448:	f2c2 0400 	movt	r4, #8192	; 0x2000
    144c:	ea42 0404 	orr.w	r4, r2, r4
    1450:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    1454:	6054      	str	r4, [r2, #4]
    1456:	e7cf      	b.n	13f8 <MSS_SPI_configure_master_mode+0x74>

00001458 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    1458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    145a:	8883      	ldrh	r3, [r0, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    145c:	2601      	movs	r6, #1
    145e:	f003 051f 	and.w	r5, r3, #31
    1462:	fa16 f505 	lsls.w	r5, r6, r5
    1466:	fa0f fc83 	sxth.w	ip, r3
    146a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    146e:	f24e 1200 	movw	r2, #57600	; 0xe100
    1472:	f2ce 0200 	movt	r2, #57344	; 0xe000
    1476:	f10c 0720 	add.w	r7, ip, #32

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    147a:	6803      	ldr	r3, [r0, #0]
    147c:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    1480:	689a      	ldr	r2, [r3, #8]
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    1482:	4604      	mov	r4, r0
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    if(rx_overflow)
    1484:	f012 0f04 	tst.w	r2, #4
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    1488:	460f      	mov	r7, r1
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    if(rx_overflow)
    148a:	d00a      	beq.n	14a2 <MSS_SPI_set_slave_select+0x4a>
    {
         recover_from_rx_overflow(this_spi);
    148c:	f7ff ff14 	bl	12b8 <recover_from_rx_overflow>
    1490:	88a1      	ldrh	r1, [r4, #4]
    1492:	6823      	ldr	r3, [r4, #0]
    1494:	f001 021f 	and.w	r2, r1, #31
    1498:	fa16 f502 	lsls.w	r5, r6, r2
    149c:	b208      	sxth	r0, r1
    149e:	ea4f 1c50 	mov.w	ip, r0, lsr #5
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
    14a2:	2101      	movs	r1, #1
    14a4:	40b9      	lsls	r1, r7
    {
         recover_from_rx_overflow(this_spi);
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    14a6:	6818      	ldr	r0, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
    14a8:	3706      	adds	r7, #6
    {
         recover_from_rx_overflow(this_spi);
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    14aa:	f020 0201 	bic.w	r2, r0, #1
    14ae:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
    14b0:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
    14b4:	6860      	ldr	r0, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    14b6:	f24e 1200 	movw	r2, #57600	; 0xe100
    14ba:	6018      	str	r0, [r3, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
    14bc:	7a60      	ldrb	r0, [r4, #9]
    14be:	f2ce 0200 	movt	r2, #57344	; 0xe000
    14c2:	6198      	str	r0, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
    14c4:	7a20      	ldrb	r0, [r4, #8]
    14c6:	6058      	str	r0, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    14c8:	6818      	ldr	r0, [r3, #0]
    14ca:	f040 0001 	orr.w	r0, r0, #1
    14ce:	6018      	str	r0, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
    14d0:	69d8      	ldr	r0, [r3, #28]
    14d2:	4301      	orrs	r1, r0
    14d4:	61d9      	str	r1, [r3, #28]
    14d6:	f842 502c 	str.w	r5, [r2, ip, lsl #2]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
}
    14da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000014dc <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    14dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    14de:	8883      	ldrh	r3, [r0, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    14e0:	2601      	movs	r6, #1
    14e2:	f003 051f 	and.w	r5, r3, #31
    14e6:	fa16 f505 	lsls.w	r5, r6, r5
    14ea:	fa0f fc83 	sxth.w	ip, r3
    14ee:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    14f2:	f24e 1200 	movw	r2, #57600	; 0xe100
    14f6:	f2ce 0200 	movt	r2, #57344	; 0xe000
    14fa:	f10c 0720 	add.w	r7, ip, #32

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    14fe:	6803      	ldr	r3, [r0, #0]
    1500:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    1504:	689a      	ldr	r2, [r3, #8]
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    1506:	4604      	mov	r4, r0
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    if(rx_overflow)
    1508:	f012 0f04 	tst.w	r2, #4
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    150c:	460f      	mov	r7, r1
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    if(rx_overflow)
    150e:	d00a      	beq.n	1526 <MSS_SPI_clear_slave_select+0x4a>
    {
         recover_from_rx_overflow(this_spi);
    1510:	f7ff fed2 	bl	12b8 <recover_from_rx_overflow>
    1514:	88a1      	ldrh	r1, [r4, #4]
    1516:	6823      	ldr	r3, [r4, #0]
    1518:	f001 021f 	and.w	r2, r1, #31
    151c:	fa16 f502 	lsls.w	r5, r6, r2
    1520:	b208      	sxth	r0, r1
    1522:	ea4f 1c50 	mov.w	ip, r0, lsr #5
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
    1526:	2201      	movs	r2, #1
    1528:	fa12 f707 	lsls.w	r7, r2, r7
    152c:	69d9      	ldr	r1, [r3, #28]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    152e:	f24e 1000 	movw	r0, #57600	; 0xe100
    1532:	ea21 0707 	bic.w	r7, r1, r7
    1536:	f2ce 0000 	movt	r0, #57344	; 0xe000
    153a:	61df      	str	r7, [r3, #28]
    153c:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
}
    1540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1542:	bf00      	nop

00001544 <MSS_SPI_transfer_frame>:
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
    1544:	6803      	ldr	r3, [r0, #0]
    1546:	f240 02ff 	movw	r2, #255	; 0xff
    154a:	6818      	ldr	r0, [r3, #0]
    154c:	f6cf 7200 	movt	r2, #65280	; 0xff00
    1550:	ea00 0c02 	and.w	ip, r0, r2
    1554:	f44c 7080 	orr.w	r0, ip, #256	; 0x100
    1558:	6018      	str	r0, [r3, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
    155c:	b082      	sub	sp, #8
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    155e:	f042 000c 	orr.w	r0, r2, #12
    1562:	62d8      	str	r0, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    1564:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_fifo_empty)
    1566:	f012 0f40 	tst.w	r2, #64	; 0x40
    156a:	d107      	bne.n	157c <MSS_SPI_transfer_frame+0x38>
    {
        dummy = this_spi->hw_reg->RX_DATA;
    156c:	691a      	ldr	r2, [r3, #16]
    156e:	9201      	str	r2, [sp, #4]
        dummy = dummy;  /* Prevent Lint warning. */
    1570:	9801      	ldr	r0, [sp, #4]
    1572:	9001      	str	r0, [sp, #4]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    1574:	689a      	ldr	r2, [r3, #8]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
    1576:	f012 0f40 	tst.w	r2, #64	; 0x40
    157a:	d0f7      	beq.n	156c <MSS_SPI_transfer_frame+0x28>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    157c:	6159      	str	r1, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    157e:	6899      	ldr	r1, [r3, #8]
    while(0u == tx_done)
    1580:	f011 0f01 	tst.w	r1, #1
    1584:	d0fb      	beq.n	157e <MSS_SPI_transfer_frame+0x3a>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    1586:	6898      	ldr	r0, [r3, #8]
    while(0u == rx_ready)
    1588:	f010 0f02 	tst.w	r0, #2
    158c:	d0fb      	beq.n	1586 <MSS_SPI_transfer_frame+0x42>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
    158e:	6918      	ldr	r0, [r3, #16]
}
    1590:	b002      	add	sp, #8
    1592:	4770      	bx	lr

00001594 <fill_slave_tx_fifo>:
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    1594:	6802      	ldr	r2, [r0, #0]
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
    1596:	b430      	push	{r4, r5}
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    1598:	6893      	ldr	r3, [r2, #8]
    159a:	4614      	mov	r4, r2
    159c:	f413 7f80 	tst.w	r3, #256	; 0x100
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    15a0:	6903      	ldr	r3, [r0, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    15a2:	d110      	bne.n	15c6 <fill_slave_tx_fifo+0x32>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    15a4:	68c1      	ldr	r1, [r0, #12]
    15a6:	428b      	cmp	r3, r1
    15a8:	d231      	bcs.n	160e <fill_slave_tx_fifo+0x7a>
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
    15aa:	6885      	ldr	r5, [r0, #8]
    15ac:	e002      	b.n	15b4 <fill_slave_tx_fifo+0x20>
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    15ae:	68c1      	ldr	r1, [r0, #12]
    15b0:	4299      	cmp	r1, r3
    15b2:	d92c      	bls.n	160e <fill_slave_tx_fifo+0x7a>
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
    15b4:	5ce9      	ldrb	r1, [r5, r3]
    15b6:	6151      	str	r1, [r2, #20]
        ++this_spi->slave_tx_idx;
    15b8:	6903      	ldr	r3, [r0, #16]
    15ba:	3301      	adds	r3, #1
    15bc:	6103      	str	r3, [r0, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    15be:	6891      	ldr	r1, [r2, #8]
    15c0:	f411 7f80 	tst.w	r1, #256	; 0x100
    15c4:	d0f3      	beq.n	15ae <fill_slave_tx_fifo+0x1a>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    15c6:	68c1      	ldr	r1, [r0, #12]
    15c8:	4299      	cmp	r1, r3
    15ca:	d91f      	bls.n	160c <fill_slave_tx_fifo+0x78>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
    15cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    15ce:	b1db      	cbz	r3, 1608 <fill_slave_tx_fifo+0x74>
    15d0:	6901      	ldr	r1, [r0, #16]
    15d2:	68c3      	ldr	r3, [r0, #12]
    15d4:	4299      	cmp	r1, r3
    15d6:	d317      	bcc.n	1608 <fill_slave_tx_fifo+0x74>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    15d8:	6983      	ldr	r3, [r0, #24]
    15da:	69c1      	ldr	r1, [r0, #28]
    15dc:	4299      	cmp	r1, r3
    15de:	d313      	bcc.n	1608 <fill_slave_tx_fifo+0x74>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    15e0:	6890      	ldr	r0, [r2, #8]
    15e2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
    15e6:	d10f      	bne.n	1608 <fill_slave_tx_fifo+0x74>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
    15e8:	4619      	mov	r1, r3
    15ea:	e006      	b.n	15fa <fill_slave_tx_fifo+0x66>
    15ec:	6151      	str	r1, [r2, #20]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    15ee:	6890      	ldr	r0, [r2, #8]
    15f0:	f410 7f80 	tst.w	r0, #256	; 0x100
    15f4:	d108      	bne.n	1608 <fill_slave_tx_fifo+0x74>
    15f6:	2b20      	cmp	r3, #32
    15f8:	d006      	beq.n	1608 <fill_slave_tx_fifo+0x74>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
    15fa:	6151      	str	r1, [r2, #20]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    15fc:	6890      	ldr	r0, [r2, #8]
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
    15fe:	3301      	adds	r3, #1
    1600:	3301      	adds	r3, #1
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    1602:	f410 7f80 	tst.w	r0, #256	; 0x100
    1606:	d0f1      	beq.n	15ec <fill_slave_tx_fifo+0x58>
             */
            guard++;
        }
    }

}
    1608:	bc30      	pop	{r4, r5}
    160a:	4770      	bx	lr
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    160c:	4614      	mov	r4, r2
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    160e:	6893      	ldr	r3, [r2, #8]
    1610:	f413 7f80 	tst.w	r3, #256	; 0x100
    1614:	d1da      	bne.n	15cc <fill_slave_tx_fifo+0x38>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
    1616:	69c3      	ldr	r3, [r0, #28]
    1618:	6981      	ldr	r1, [r0, #24]
    161a:	428b      	cmp	r3, r1
    161c:	d2d6      	bcs.n	15cc <fill_slave_tx_fifo+0x38>
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
    161e:	6945      	ldr	r5, [r0, #20]
    1620:	e002      	b.n	1628 <fill_slave_tx_fifo+0x94>
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
    1622:	6981      	ldr	r1, [r0, #24]
    1624:	4299      	cmp	r1, r3
    1626:	d9d1      	bls.n	15cc <fill_slave_tx_fifo+0x38>
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
    1628:	5ce9      	ldrb	r1, [r5, r3]
    162a:	6161      	str	r1, [r4, #20]
            ++this_spi->resp_buff_tx_idx;
    162c:	69c3      	ldr	r3, [r0, #28]
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
    162e:	4614      	mov	r4, r2
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
    1630:	3301      	adds	r3, #1
    1632:	61c3      	str	r3, [r0, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    1634:	6891      	ldr	r1, [r2, #8]
    1636:	f411 7f80 	tst.w	r1, #256	; 0x100
    163a:	d0f2      	beq.n	1622 <fill_slave_tx_fifo+0x8e>
    163c:	e7c6      	b.n	15cc <fill_slave_tx_fifo+0x38>
    163e:	bf00      	nop

00001640 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
    1640:	b510      	push	{r4, lr}
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    1642:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
    1646:	b082      	sub	sp, #8
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    1648:	2b02      	cmp	r3, #2
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
    164a:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    164c:	d010      	beq.n	1670 <read_slave_rx_fifo+0x30>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    164e:	2b01      	cmp	r3, #1
    1650:	d019      	beq.n	1686 <read_slave_rx_fifo+0x46>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    1652:	6803      	ldr	r3, [r0, #0]
    1654:	689a      	ldr	r2, [r3, #8]
    1656:	f012 0f40 	tst.w	r2, #64	; 0x40
    165a:	d105      	bne.n	1668 <read_slave_rx_fifo+0x28>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
    165c:	6919      	ldr	r1, [r3, #16]
    165e:	9101      	str	r1, [sp, #4]
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    1660:	689a      	ldr	r2, [r3, #8]
    1662:	f012 0f40 	tst.w	r2, #64	; 0x40
    1666:	d0f9      	beq.n	165c <read_slave_rx_fifo+0x1c>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
    1668:	b002      	add	sp, #8
    166a:	bd10      	pop	{r4, pc}
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
            if(0u != this_spi->frame_rx_handler)
            {
                this_spi->frame_rx_handler( rx_frame );
    166c:	9801      	ldr	r0, [sp, #4]
    166e:	4798      	blx	r3
    1670:	6822      	ldr	r2, [r4, #0]
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    1672:	6893      	ldr	r3, [r2, #8]
    1674:	f013 0f40 	tst.w	r3, #64	; 0x40
    1678:	d1f6      	bne.n	1668 <read_slave_rx_fifo+0x28>
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
    167a:	6911      	ldr	r1, [r2, #16]
            if(0u != this_spi->frame_rx_handler)
    167c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
    167e:	9101      	str	r1, [sp, #4]
            if(0u != this_spi->frame_rx_handler)
    1680:	2b00      	cmp	r3, #0
    1682:	d0f6      	beq.n	1672 <read_slave_rx_fifo+0x32>
    1684:	e7f2      	b.n	166c <read_slave_rx_fifo+0x2c>
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    1686:	6802      	ldr	r2, [r0, #0]
    1688:	6890      	ldr	r0, [r2, #8]
    168a:	f010 0f40 	tst.w	r0, #64	; 0x40
    168e:	d1eb      	bne.n	1668 <read_slave_rx_fifo+0x28>
    1690:	6b23      	ldr	r3, [r4, #48]	; 0x30
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
    1692:	6910      	ldr	r0, [r2, #16]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
    1694:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
    1696:	9001      	str	r0, [sp, #4]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
    1698:	4299      	cmp	r1, r3
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
    169a:	bf81      	itttt	hi
    169c:	9901      	ldrhi	r1, [sp, #4]
    169e:	6aa2      	ldrhi	r2, [r4, #40]	; 0x28
    16a0:	54d1      	strbhi	r1, [r2, r3]
    16a2:	6b23      	ldrhi	r3, [r4, #48]	; 0x30
    16a4:	bf88      	it	hi
    16a6:	6822      	ldrhi	r2, [r4, #0]
            }

            ++this_spi->slave_rx_idx;
    16a8:	3301      	adds	r3, #1
    16aa:	6323      	str	r3, [r4, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    16ac:	6891      	ldr	r1, [r2, #8]
    16ae:	f011 0f40 	tst.w	r1, #64	; 0x40
    16b2:	d0ee      	beq.n	1692 <read_slave_rx_fifo+0x52>
    16b4:	e7d8      	b.n	1668 <read_slave_rx_fifo+0x28>
    16b6:	bf00      	nop

000016b8 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
    16b8:	b570      	push	{r4, r5, r6, lr}
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
    16ba:	6803      	ldr	r3, [r0, #0]
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
    16bc:	b082      	sub	sp, #8
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    16be:	6a1a      	ldr	r2, [r3, #32]
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
    16c0:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    16c2:	f012 0f02 	tst.w	r2, #2
(
    mss_spi_instance_t * this_spi
)
{    
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
    16c6:	461d      	mov	r5, r3

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    16c8:	d00e      	beq.n	16e8 <mss_spi_isr+0x30>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    16ca:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    16ce:	2a02      	cmp	r2, #2
    16d0:	d03b      	beq.n	174a <mss_spi_isr+0x92>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    16d2:	2a01      	cmp	r2, #1
    16d4:	d102      	bne.n	16dc <mss_spi_isr+0x24>
    16d6:	e098      	b.n	180a <mss_spi_isr+0x152>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
    16d8:	691a      	ldr	r2, [r3, #16]
    16da:	9201      	str	r2, [sp, #4]
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    16dc:	6899      	ldr	r1, [r3, #8]
    16de:	f011 0f40 	tst.w	r1, #64	; 0x40
    16e2:	d0f9      	beq.n	16d8 <mss_spi_isr+0x20>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
    16e4:	2002      	movs	r0, #2
    16e6:	60d8      	str	r0, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
    16e8:	6a2a      	ldr	r2, [r5, #32]
    16ea:	f012 0f01 	tst.w	r2, #1
    16ee:	d00a      	beq.n	1706 <mss_spi_isr+0x4e>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
    16f0:	f894 c080 	ldrb.w	ip, [r4, #128]	; 0x80
    16f4:	f1bc 0f02 	cmp.w	ip, #2
    16f8:	d031      	beq.n	175e <mss_spi_isr+0xa6>
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
    16fa:	4620      	mov	r0, r4
    16fc:	f7ff ff4a 	bl	1594 <fill_slave_tx_fifo>
    1700:	6823      	ldr	r3, [r4, #0]
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
    1702:	2001      	movs	r0, #1
    1704:	60d8      	str	r0, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
    1706:	6a2a      	ldr	r2, [r5, #32]
    1708:	f012 0f10 	tst.w	r2, #16
    170c:	d15b      	bne.n	17c6 <mss_spi_isr+0x10e>
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
    170e:	6a28      	ldr	r0, [r5, #32]
    1710:	f010 0f04 	tst.w	r0, #4
    1714:	d14c      	bne.n	17b0 <mss_spi_isr+0xf8>
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
    1716:	6a28      	ldr	r0, [r5, #32]
    1718:	f010 0f08 	tst.w	r0, #8
    171c:	d00c      	beq.n	1738 <mss_spi_isr+0x80>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
    171e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
    1720:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
    1724:	f040 0108 	orr.w	r1, r0, #8
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
    1728:	2a02      	cmp	r2, #2
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
    172a:	62d9      	str	r1, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
    172c:	d060      	beq.n	17f0 <mss_spi_isr+0x138>
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
    172e:	2a01      	cmp	r2, #1
    1730:	f000 8085 	beq.w	183e <mss_spi_isr+0x186>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
    1734:	2108      	movs	r1, #8
    1736:	60d9      	str	r1, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
    1738:	6a28      	ldr	r0, [r5, #32]
    173a:	f010 0f20 	tst.w	r0, #32
    173e:	d111      	bne.n	1764 <mss_spi_isr+0xac>
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
    }
}
    1740:	b002      	add	sp, #8
    1742:	bd70      	pop	{r4, r5, r6, pc}
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
                if(0u != this_spi->frame_rx_handler)
                {
                    this_spi->frame_rx_handler( rx_frame );
    1744:	9801      	ldr	r0, [sp, #4]
    1746:	4790      	blx	r2
    1748:	6823      	ldr	r3, [r4, #0]
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    174a:	6898      	ldr	r0, [r3, #8]
    174c:	f010 0f40 	tst.w	r0, #64	; 0x40
    1750:	d1c8      	bne.n	16e4 <mss_spi_isr+0x2c>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
    1752:	6919      	ldr	r1, [r3, #16]
                if(0u != this_spi->frame_rx_handler)
    1754:	6f62      	ldr	r2, [r4, #116]	; 0x74
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
    1756:	9101      	str	r1, [sp, #4]
                if(0u != this_spi->frame_rx_handler)
    1758:	2a00      	cmp	r2, #0
    175a:	d0f6      	beq.n	174a <mss_spi_isr+0x92>
    175c:	e7f2      	b.n	1744 <mss_spi_isr+0x8c>
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
    175e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    1760:	6159      	str	r1, [r3, #20]
    1762:	e7ce      	b.n	1702 <mss_spi_isr+0x4a>
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
    1764:	4620      	mov	r0, r4
    1766:	f7ff ff6b 	bl	1640 <read_slave_rx_fifo>
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
    176a:	6a25      	ldr	r5, [r4, #32]
    if(0u != (*this_mis & SSEND_IRQ_MASK))
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
        rx_size = this_spi->slave_rx_idx;
    176c:	6b26      	ldr	r6, [r4, #48]	; 0x30
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
    176e:	2d00      	cmp	r5, #0
    1770:	d063      	beq.n	183a <mss_spi_isr+0x182>
        {
            this_spi->cmd_done = 0u;
            this_spi->resp_tx_buffer = 0u;
            this_spi->resp_buff_size = 0u;
            this_spi->resp_buff_tx_idx = 0u;
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    1772:	6823      	ldr	r3, [r4, #0]
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
        {
            this_spi->cmd_done = 0u;
    1774:	2000      	movs	r0, #0
            this_spi->resp_tx_buffer = 0u;
            this_spi->resp_buff_size = 0u;
            this_spi->resp_buff_tx_idx = 0u;
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    1776:	2510      	movs	r5, #16
        if(0u != this_spi->cmd_handler)
        {
            this_spi->cmd_done = 0u;
            this_spi->resp_tx_buffer = 0u;
            this_spi->resp_buff_size = 0u;
            this_spi->resp_buff_tx_idx = 0u;
    1778:	61e0      	str	r0, [r4, #28]
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
        {
            this_spi->cmd_done = 0u;
    177a:	6260      	str	r0, [r4, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
            this_spi->resp_buff_size = 0u;
    177c:	61a0      	str	r0, [r4, #24]
            this_spi->resp_buff_tx_idx = 0u;
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    177e:	60dd      	str	r5, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
    1780:	6a99      	ldr	r1, [r3, #40]	; 0x28
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
        {
            this_spi->cmd_done = 0u;
            this_spi->resp_tx_buffer = 0u;
    1782:	6160      	str	r0, [r4, #20]
            this_spi->resp_buff_size = 0u;
            this_spi->resp_buff_tx_idx = 0u;
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
    1784:	f041 0210 	orr.w	r2, r1, #16
    1788:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
    178a:	2500      	movs	r5, #0
    178c:	6125      	str	r5, [r4, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    178e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
    1790:	4620      	mov	r0, r4
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    1792:	f041 020c 	orr.w	r2, r1, #12
    1796:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
    1798:	f7ff fefc 	bl	1594 <fill_slave_tx_fifo>
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
    179c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
        this_spi->slave_tx_idx = 0u;
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
        fill_slave_tx_fifo(this_spi);
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
    179e:	6325      	str	r5, [r4, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
    17a0:	b113      	cbz	r3, 17a8 <mss_spi_isr+0xf0>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
    17a2:	4631      	mov	r1, r6
    17a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    17a6:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
    17a8:	6823      	ldr	r3, [r4, #0]
    17aa:	2020      	movs	r0, #32
    17ac:	60d8      	str	r0, [r3, #12]
    17ae:	e7c7      	b.n	1740 <mss_spi_isr+0x88>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
    17b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
    17b2:	4620      	mov	r0, r4
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
    17b4:	f042 0104 	orr.w	r1, r2, #4
    17b8:	62d9      	str	r1, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
    17ba:	f7ff fd7d 	bl	12b8 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
    17be:	6823      	ldr	r3, [r4, #0]
    17c0:	2204      	movs	r2, #4
    17c2:	60da      	str	r2, [r3, #12]
    17c4:	e7a7      	b.n	1716 <mss_spi_isr+0x5e>
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
    {
        read_slave_rx_fifo(this_spi);
    17c6:	4620      	mov	r0, r4
    17c8:	f7ff ff3a 	bl	1640 <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
    17cc:	6a23      	ldr	r3, [r4, #32]
    17ce:	b12b      	cbz	r3, 17dc <mss_spi_isr+0x124>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
    17d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    17d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    17d4:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
    17d6:	4620      	mov	r0, r4
    17d8:	f7ff fedc 	bl	1594 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
    17dc:	6823      	ldr	r3, [r4, #0]
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
            fill_slave_tx_fifo(this_spi);
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
    17de:	2101      	movs	r1, #1
    17e0:	6261      	str	r1, [r4, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
    17e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    17e4:	2110      	movs	r1, #16
            fill_slave_tx_fifo(this_spi);
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
    17e6:	f022 0010 	bic.w	r0, r2, #16
    17ea:	6298      	str	r0, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    17ec:	60d9      	str	r1, [r3, #12]
    17ee:	e78e      	b.n	170e <mss_spi_isr+0x56>
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
    17f0:	681a      	ldr	r2, [r3, #0]
    17f2:	f240 00ff 	movw	r0, #255	; 0xff
    17f6:	f6cf 7000 	movt	r0, #65280	; 0xff00
    17fa:	ea02 0c00 	and.w	ip, r2, r0
    17fe:	f44c 7180 	orr.w	r1, ip, #256	; 0x100
    1802:	6019      	str	r1, [r3, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
    1804:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    1806:	615a      	str	r2, [r3, #20]
    1808:	e794      	b.n	1734 <mss_spi_isr+0x7c>
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    180a:	689a      	ldr	r2, [r3, #8]
    180c:	f012 0f40 	tst.w	r2, #64	; 0x40
    1810:	f47f af68 	bne.w	16e4 <mss_spi_isr+0x2c>
    1814:	6b02      	ldr	r2, [r0, #48]	; 0x30
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
    1816:	6918      	ldr	r0, [r3, #16]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
    1818:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
    181a:	9001      	str	r0, [sp, #4]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
    181c:	4291      	cmp	r1, r2
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
    181e:	bf81      	itttt	hi
    1820:	9901      	ldrhi	r1, [sp, #4]
    1822:	6aa3      	ldrhi	r3, [r4, #40]	; 0x28
    1824:	5499      	strbhi	r1, [r3, r2]
    1826:	6b22      	ldrhi	r2, [r4, #48]	; 0x30
    1828:	bf88      	it	hi
    182a:	6823      	ldrhi	r3, [r4, #0]
                }

                ++this_spi->slave_rx_idx;            
    182c:	3201      	adds	r2, #1
    182e:	6322      	str	r2, [r4, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    1830:	6899      	ldr	r1, [r3, #8]
    1832:	f011 0f40 	tst.w	r1, #64	; 0x40
    1836:	d0ee      	beq.n	1816 <mss_spi_isr+0x15e>
    1838:	e754      	b.n	16e4 <mss_spi_isr+0x2c>
    183a:	6823      	ldr	r3, [r4, #0]
    183c:	e7a5      	b.n	178a <mss_spi_isr+0xd2>
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
    183e:	2300      	movs	r3, #0
    1840:	6123      	str	r3, [r4, #16]
            fill_slave_tx_fifo(this_spi);
    1842:	4620      	mov	r0, r4
    1844:	f7ff fea6 	bl	1594 <fill_slave_tx_fifo>
    1848:	6823      	ldr	r3, [r4, #0]
    184a:	e773      	b.n	1734 <mss_spi_isr+0x7c>

0000184c <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
    184c:	4668      	mov	r0, sp
    184e:	f020 0107 	bic.w	r1, r0, #7
    1852:	468d      	mov	sp, r1
    1854:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi0);
    1856:	f242 00c8 	movw	r0, #8392	; 0x20c8
    185a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    185e:	f7ff ff2b 	bl	16b8 <mss_spi_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1862:	f24e 1300 	movw	r3, #57600	; 0xe100
    1866:	f2ce 0300 	movt	r3, #57344	; 0xe000
    186a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    186e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI0_IRQn);
}
    1872:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    1876:	4685      	mov	sp, r0
    1878:	4770      	bx	lr
    187a:	bf00      	nop

0000187c <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
    187c:	4668      	mov	r0, sp
    187e:	f020 0107 	bic.w	r1, r0, #7
    1882:	468d      	mov	sp, r1
    1884:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi1);
    1886:	f242 0044 	movw	r0, #8260	; 0x2044
    188a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    188e:	f7ff ff13 	bl	16b8 <mss_spi_isr>
    1892:	f24e 1300 	movw	r3, #57600	; 0xe100
    1896:	f2ce 0300 	movt	r3, #57344	; 0xe000
    189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    189e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI1_IRQn);
}
    18a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    18a6:	4685      	mov	sp, r0
    18a8:	4770      	bx	lr
    18aa:	bf00      	nop

000018ac <MSS_SPI_init>:
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    18ac:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
    18b0:	b570      	push	{r4, r5, r6, lr}
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    18b2:	f00c 021f 	and.w	r2, ip, #31
    18b6:	2601      	movs	r6, #1
    18b8:	fa16 f102 	lsls.w	r1, r6, r2
    18bc:	fa0f f58c 	sxth.w	r5, ip
    18c0:	096b      	lsrs	r3, r5, #5
    18c2:	f24e 1500 	movw	r5, #57600	; 0xe100
    18c6:	3320      	adds	r3, #32
    18c8:	f2ce 0500 	movt	r5, #57344	; 0xe000
    18cc:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    18d0:	2284      	movs	r2, #132	; 0x84
    18d2:	2100      	movs	r1, #0
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
    18d4:	4604      	mov	r4, r0
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    18d6:	f000 fd11 	bl	22fc <memset>
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    18da:	f04f 33ff 	mov.w	r3, #4294967295
    }

    if(this_spi == &g_mss_spi0)
    18de:	f242 02c8 	movw	r2, #8392	; 0x20c8
    18e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    18e6:	66e3      	str	r3, [r4, #108]	; 0x6c
    18e8:	6363      	str	r3, [r4, #52]	; 0x34
    18ea:	63e3      	str	r3, [r4, #60]	; 0x3c
    18ec:	6463      	str	r3, [r4, #68]	; 0x44
    18ee:	64e3      	str	r3, [r4, #76]	; 0x4c
    18f0:	6563      	str	r3, [r4, #84]	; 0x54
    18f2:	65e3      	str	r3, [r4, #92]	; 0x5c
    18f4:	6663      	str	r3, [r4, #100]	; 0x64
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    18f6:	f242 0300 	movw	r3, #8192	; 0x2000
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;
    18fa:	6266      	str	r6, [r4, #36]	; 0x24
    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
    18fc:	4294      	cmp	r4, r2
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    18fe:	f2ce 0304 	movt	r3, #57348	; 0xe004
    1902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
    1904:	d018      	beq.n	1938 <MSS_SPI_init+0x8c>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
        this_spi->irqn = SPI1_IRQn;
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
    1906:	f442 6080 	orr.w	r0, r2, #1024	; 0x400
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    190e:	6318      	str	r0, [r3, #48]	; 0x30
    1910:	f8c5 2180 	str.w	r2, [r5, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    1914:	6b19      	ldr	r1, [r3, #48]	; 0x30
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    1916:	f241 0200 	movw	r2, #4096	; 0x1000
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    191a:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    191e:	f2c4 0201 	movt	r2, #16385	; 0x4001
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    1922:	6318      	str	r0, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    1924:	6811      	ldr	r1, [r2, #0]
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
        this_spi->irqn = SPI1_IRQn;
    1926:	f04f 0e0d 	mov.w	lr, #13
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    192a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
        this_spi->irqn = SPI1_IRQn;
    192e:	f8a4 e004 	strh.w	lr, [r4, #4]
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    1932:	6022      	str	r2, [r4, #0]
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    1934:	6013      	str	r3, [r2, #0]
}
    1936:	bd70      	pop	{r4, r5, r6, pc}
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    1938:	f442 7100 	orr.w	r1, r2, #512	; 0x200
    193c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1940:	6319      	str	r1, [r3, #48]	; 0x30
    1942:	f8c5 2180 	str.w	r2, [r5, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    1946:	6b18      	ldr	r0, [r3, #48]	; 0x30
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    1948:	f241 0200 	movw	r2, #4096	; 0x1000
        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    194c:	f420 7100 	bic.w	r1, r0, #512	; 0x200
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    1950:	f2c4 0200 	movt	r2, #16384	; 0x4000
        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    1954:	6319      	str	r1, [r3, #48]	; 0x30
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    1956:	6811      	ldr	r1, [r2, #0]
    }

    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;
    1958:	f04f 000c 	mov.w	r0, #12
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    195c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    }

    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
        this_spi->irqn = SPI0_IRQn;
    1960:	80a0      	strh	r0, [r4, #4]
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    1962:	6022      	str	r2, [r4, #0]
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    1964:	6013      	str	r3, [r2, #0]
}
    1966:	bd70      	pop	{r4, r5, r6, pc}

00001968 <MSS_GPIO_init>:
void MSS_GPIO_init( void )
{
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    1968:	f242 0300 	movw	r3, #8192	; 0x2000
    196c:	f2ce 0304 	movt	r3, #57348	; 0xe004
    1970:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1972:	f242 5c00 	movw	ip, #9472	; 0x2500
    1976:	f440 4280 	orr.w	r2, r0, #16384	; 0x4000
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    197a:	f24e 1000 	movw	r0, #57600	; 0xe100
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
    197e:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    1980:	631a      	str	r2, [r3, #48]	; 0x30
    1982:	f2c0 0c00 	movt	ip, #0
    1986:	f2ce 0000 	movt	r0, #57344	; 0xe000
    198a:	2300      	movs	r3, #0
    198c:	2401      	movs	r4, #1
    198e:	1c9a      	adds	r2, r3, #2
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    1990:	f83c 1003 	ldrh.w	r1, [ip, r3]
    1994:	f83c 3002 	ldrh.w	r3, [ip, r2]
    1998:	f001 071f 	and.w	r7, r1, #31
    199c:	f003 051f 	and.w	r5, r3, #31
    19a0:	fa14 f707 	lsls.w	r7, r4, r7
    19a4:	fa14 f505 	lsls.w	r5, r4, r5
    19a8:	b20e      	sxth	r6, r1
    19aa:	b21b      	sxth	r3, r3
    19ac:	0959      	lsrs	r1, r3, #5
    19ae:	0976      	lsrs	r6, r6, #5
    19b0:	1c93      	adds	r3, r2, #2
    19b2:	3660      	adds	r6, #96	; 0x60
    19b4:	3160      	adds	r1, #96	; 0x60
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    19b6:	2b40      	cmp	r3, #64	; 0x40
    19b8:	f840 7026 	str.w	r7, [r0, r6, lsl #2]
    19bc:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
    19c0:	d1e5      	bne.n	198e <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
    19c2:	f242 0300 	movw	r3, #8192	; 0x2000
    19c6:	f2ce 0304 	movt	r3, #57348	; 0xe004
    19ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    19cc:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
    19d0:	6318      	str	r0, [r3, #48]	; 0x30
}
    19d2:	bcf0      	pop	{r4, r5, r6, r7}
    19d4:	4770      	bx	lr
    19d6:	bf00      	nop

000019d8 <MSS_GPIO_config>:
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );

    if ( gpio_idx < NB_OF_GPIO )
    19d8:	281f      	cmp	r0, #31
    {
        *(g_config_reg_lut[gpio_idx]) = config;
    19da:	bf9f      	itttt	ls
    19dc:	f242 5340 	movwls	r3, #9536	; 0x2540
    19e0:	f2c0 0300 	movtls	r3, #0
    19e4:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
    19e8:	6019      	strls	r1, [r3, #0]
    19ea:	4770      	bx	lr

000019ec <MSS_GPIO_set_output>:
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    
    if ( gpio_idx < NB_OF_GPIO )
    19ec:	281f      	cmp	r0, #31
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
    19ee:	bf9f      	itttt	ls
    19f0:	f240 0300 	movwls	r3, #0
    19f4:	f2c4 2326 	movtls	r3, #16934	; 0x4226
    19f8:	f500 6088 	addls.w	r0, r0, #1088	; 0x440
    19fc:	f843 1020 	strls.w	r1, [r3, r0, lsl #2]
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop

00001a04 <MSS_GPIO_enable_irq>:
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    
    if ( gpio_idx < NB_OF_GPIO )
    1a04:	281f      	cmp	r0, #31
 */
void MSS_GPIO_enable_irq
(
    mss_gpio_id_t port_id
)
{
    1a06:	b410      	push	{r4}
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    
    if ( gpio_idx < NB_OF_GPIO )
    1a08:	d81c      	bhi.n	1a44 <MSS_GPIO_enable_irq+0x40>
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
    1a0a:	f242 5100 	movw	r1, #9472	; 0x2500
    1a0e:	f2c0 0100 	movt	r1, #0
    1a12:	f831 c010 	ldrh.w	ip, [r1, r0, lsl #1]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1a16:	2401      	movs	r4, #1
    1a18:	f00c 021f 	and.w	r2, ip, #31
    1a1c:	4094      	lsls	r4, r2
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
    1a1e:	f242 5340 	movw	r3, #9536	; 0x2540
    1a22:	f2c0 0300 	movt	r3, #0
    1a26:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    1a2a:	fa0f f18c 	sxth.w	r1, ip
    1a2e:	6810      	ldr	r0, [r2, #0]
    1a30:	f24e 1300 	movw	r3, #57600	; 0xe100
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
    1a34:	f040 0008 	orr.w	r0, r0, #8
    1a38:	0949      	lsrs	r1, r1, #5
    1a3a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1a3e:	6010      	str	r0, [r2, #0]
    1a40:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
    }
}
    1a44:	bc10      	pop	{r4}
    1a46:	4770      	bx	lr

00001a48 <MSS_GPIO_clear_irq>:
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    
    if ( gpio_idx < NB_OF_GPIO )
    1a48:	281f      	cmp	r0, #31
 */
void MSS_GPIO_clear_irq
(
    mss_gpio_id_t port_id
)
{
    1a4a:	b410      	push	{r4}
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    
    if ( gpio_idx < NB_OF_GPIO )
    1a4c:	d81c      	bhi.n	1a88 <MSS_GPIO_clear_irq+0x40>
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
    1a4e:	f242 5300 	movw	r3, #9472	; 0x2500
    1a52:	f2c0 0300 	movt	r3, #0
    1a56:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
    1a5a:	2201      	movs	r2, #1
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1a5c:	f00c 041f 	and.w	r4, ip, #31
    1a60:	fa12 f404 	lsls.w	r4, r2, r4
    1a64:	fa12 f000 	lsls.w	r0, r2, r0
    1a68:	fa0f f18c 	sxth.w	r1, ip
    1a6c:	0949      	lsrs	r1, r1, #5
    1a6e:	f243 0200 	movw	r2, #12288	; 0x3000
    1a72:	f24e 1300 	movw	r3, #57600	; 0xe100
    1a76:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1a7a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1a7e:	3160      	adds	r1, #96	; 0x60
    1a80:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    1a84:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
    }
}
    1a88:	bc10      	pop	{r4}
    1a8a:	4770      	bx	lr

00001a8c <ACE_get_ppe_sample>:
{
    uint16_t sample;
    uint16_t ppe_offset;
    
    ppe_offset = g_ace_channel_desc_table[channel_handle].signal_ppe_offset;
    sample = (uint16_t)(ACE->PPE_RAM_DATA[ppe_offset] >> 16u);
    1a8c:	f240 0c34 	movw	ip, #52	; 0x34
    1a90:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    1a94:	eb0c 1200 	add.w	r2, ip, r0, lsl #4
    1a98:	88d1      	ldrh	r1, [r2, #6]
    1a9a:	f240 0300 	movw	r3, #0
    1a9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1aa2:	f501 62c0 	add.w	r2, r1, #1536	; 0x600
    1aa6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1aaa:	0c00      	lsrs	r0, r0, #16
    
    /* Check that the PPE processing did not result into a negative value.*/
    if((sample & 0x8000u) > 0u)
    1aac:	f410 4f00 	tst.w	r0, #32768	; 0x8000
        /* Normalize negative value to zero. */
        sample = 0u;
    }
    
    return sample;
}
    1ab0:	bf18      	it	ne
    1ab2:	2000      	movne	r0, #0
    1ab4:	4770      	bx	lr
    1ab6:	bf00      	nop

00001ab8 <ACE_get_channel_handle>:
ace_channel_handle_t
ACE_get_channel_handle
(
    const uint8_t * p_sz_channel_name
)
{
    1ab8:	b538      	push	{r3, r4, r5, lr}
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
    1aba:	f240 0434 	movw	r4, #52	; 0x34
    1abe:	f2c2 0400 	movt	r4, #8192	; 0x2000
    1ac2:	6821      	ldr	r1, [r4, #0]
ace_channel_handle_t
ACE_get_channel_handle
(
    const uint8_t * p_sz_channel_name
)
{
    1ac4:	4605      	mov	r5, r0
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
    1ac6:	b121      	cbz	r1, 1ad2 <ACE_get_channel_handle+0x1a>
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
    1ac8:	2210      	movs	r2, #16
    1aca:	f000 fc81 	bl	23d0 <strncmp>
            if ( 0 == diff )
    1ace:	4603      	mov	r3, r0
    1ad0:	b1b8      	cbz	r0, 1b02 <ACE_get_channel_handle+0x4a>
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
    1ad2:	6921      	ldr	r1, [r4, #16]
    1ad4:	b121      	cbz	r1, 1ae0 <ACE_get_channel_handle+0x28>
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
    1ad6:	4628      	mov	r0, r5
    1ad8:	2210      	movs	r2, #16
    1ada:	f000 fc79 	bl	23d0 <strncmp>
            if ( 0 == diff )
    1ade:	b190      	cbz	r0, 1b06 <ACE_get_channel_handle+0x4e>
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
    1ae0:	6a21      	ldr	r1, [r4, #32]
    1ae2:	b121      	cbz	r1, 1aee <ACE_get_channel_handle+0x36>
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
    1ae4:	4628      	mov	r0, r5
    1ae6:	2210      	movs	r2, #16
    1ae8:	f000 fc72 	bl	23d0 <strncmp>
            if ( 0 == diff )
    1aec:	b168      	cbz	r0, 1b0a <ACE_get_channel_handle+0x52>
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
    1aee:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1af0:	b121      	cbz	r1, 1afc <ACE_get_channel_handle+0x44>
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
    1af2:	4628      	mov	r0, r5
    1af4:	2210      	movs	r2, #16
    1af6:	f000 fc6b 	bl	23d0 <strncmp>
            if ( 0 == diff )
    1afa:	b108      	cbz	r0, 1b00 <ACE_get_channel_handle+0x48>
            {
                /* channel name found. */
                channel_handle = (ace_channel_handle_t)channel_idx;
                break;
    1afc:	2004      	movs	r0, #4
            }
        }
    }
    return channel_handle;
}
    1afe:	bd38      	pop	{r3, r4, r5, pc}
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
            if ( 0 == diff )
    1b00:	2303      	movs	r3, #3
            {
                /* channel name found. */
                channel_handle = (ace_channel_handle_t)channel_idx;
    1b02:	b2d8      	uxtb	r0, r3
                break;
    1b04:	bd38      	pop	{r3, r4, r5, pc}
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
            if ( 0 == diff )
    1b06:	2301      	movs	r3, #1
    1b08:	e7fb      	b.n	1b02 <ACE_get_channel_handle+0x4a>
    1b0a:	2302      	movs	r3, #2
    1b0c:	e7f9      	b.n	1b02 <ACE_get_channel_handle+0x4a>
    1b0e:	bf00      	nop

00001b10 <ACE_init>:

/*-------------------------------------------------------------------------*//**
  See "mss_ace.h" for details of how to use this function.
 */
void ACE_init( void )
{
    1b10:	b510      	push	{r4, lr}
    /* Initialize driver's internal data. */
    ace_init_flags();
    1b12:	f000 f9c9 	bl	1ea8 <ace_init_flags>
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
}
    1b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    /* Initialize driver's internal data. */
    ace_init_flags();
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
    1b1a:	f000 b8a9 	b.w	1c70 <ace_init_convert>
    1b1e:	bf00      	nop

00001b20 <SystemInit>:
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
    1b20:	4770      	bx	lr
    1b22:	bf00      	nop

00001b24 <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
    1b24:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
    1b28:	f242 57c0 	movw	r7, #9664	; 0x25c0

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
    1b2c:	b085      	sub	sp, #20
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
    1b2e:	f2c0 0700 	movt	r7, #0
    1b32:	466e      	mov	r6, sp
    1b34:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    1b38:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b3c:	f242 0300 	movw	r3, #8192	; 0x2000
    1b40:	f2ce 0304 	movt	r3, #57348	; 0xe004
    1b44:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b46:	6c99      	ldr	r1, [r3, #72]	; 0x48

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b48:	f005 0c0c 	and.w	ip, r5, #12
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b4c:	f3c1 1a01 	ubfx	sl, r1, #4, #2

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b50:	f10d 0910 	add.w	r9, sp, #16
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
    1b54:	f240 2130 	movw	r1, #560	; 0x230

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b58:	6c9a      	ldr	r2, [r3, #72]	; 0x48

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b5a:	eb0c 0009 	add.w	r0, ip, r9
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
    1b5e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
    1b60:	f2c6 0108 	movt	r1, #24584	; 0x6008
    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b64:	eb09 078a 	add.w	r7, r9, sl, lsl #2
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
    1b68:	6cdd      	ldr	r5, [r3, #76]	; 0x4c

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b6a:	f850 ac10 	ldr.w	sl, [r0, #-16]
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
    1b6e:	6808      	ldr	r0, [r1, #0]
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
        FabDiv = obdiv + 1uL;
    1b70:	f3c4 2c04 	ubfx	ip, r4, #8, #5
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
	
    if ( A2F060IFX_ID == idcode )
    1b74:	f241 13cf 	movw	r3, #4559	; 0x11cf

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b78:	f3c2 1881 	ubfx	r8, r2, #6, #2
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
        FabDiv = obdiv + 1uL;
        if ( obdivhalf != 0uL )
    1b7c:	f415 5f00 	tst.w	r5, #8192	; 0x2000
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
        FabDiv = obdiv + 1uL;
    1b80:	f10c 0c01 	add.w	ip, ip, #1
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
	
    if ( A2F060IFX_ID == idcode )
    1b84:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
    1b88:	f2c0 53a1 	movt	r3, #1441	; 0x5a1

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b8c:	eb09 0688 	add.w	r6, r9, r8, lsl #2
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
        FabDiv = obdiv + 1uL;
        if ( obdivhalf != 0uL )
        {
            FabDiv = FabDiv * 2uL;
    1b90:	bf18      	it	ne
    1b92:	ea4f 0c4c 	movne.w	ip, ip, lsl #1
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
	
    if ( A2F060IFX_ID == idcode )
    1b96:	429a      	cmp	r2, r3
    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b98:	f857 8c10 	ldr.w	r8, [r7, #-16]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
    1b9c:	f856 7c10 	ldr.w	r7, [r6, #-16]
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
	
    if ( A2F060IFX_ID == idcode )
    1ba0:	d03b      	beq.n	1c1a <SystemCoreClockUpdate+0xf6>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
        fclk = *p_fclk;
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
    1ba2:	f640 031c 	movw	r3, #2076	; 0x81c
    1ba6:	f2c6 0308 	movt	r3, #24584	; 0x6008
    1baa:	681c      	ldr	r4, [r3, #0]
    1bac:	f244 3941 	movw	r9, #17217	; 0x4341
    1bb0:	f6c4 4954 	movt	r9, #19540	; 0x4c54
    1bb4:	454c      	cmp	r4, r9
    1bb6:	d038      	beq.n	1c2a <SystemCoreClockUpdate+0x106>
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
    1bb8:	f647 0340 	movw	r3, #30784	; 0x7840
    1bbc:	f2c0 137d 	movt	r3, #381	; 0x17d
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
    1bc0:	f240 022c 	movw	r2, #44	; 0x2c
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
    1bc4:	f240 0624 	movw	r6, #36	; 0x24
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
    1bc8:	f240 0528 	movw	r5, #40	; 0x28
    g_FrequencyACE = SystemCoreClock / AceDiv;
    1bcc:	f240 041c 	movw	r4, #28
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
    1bd0:	f240 0020 	movw	r0, #32
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
    1bd4:	f240 0130 	movw	r1, #48	; 0x30
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
    g_FrequencyACE = SystemCoreClock / AceDiv;
    1bd8:	fbb3 f9f7 	udiv	r9, r3, r7
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
    1bdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
    1be0:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1be4:	fbb3 fafa 	udiv	sl, r3, sl
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
    1be8:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1bec:	fbb3 f8f8 	udiv	r8, r3, r8
    g_FrequencyACE = SystemCoreClock / AceDiv;
    1bf0:	f2c2 0400 	movt	r4, #8192	; 0x2000
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
    1bf4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1bf8:	fbb3 f7fc 	udiv	r7, r3, ip
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
    1bfc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
    1c00:	f8c6 a000 	str.w	sl, [r6]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
    1c04:	f8c5 8000 	str.w	r8, [r5]
    g_FrequencyACE = SystemCoreClock / AceDiv;
    1c08:	f8c4 9000 	str.w	r9, [r4]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
    1c0c:	6007      	str	r7, [r0, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
    1c0e:	600b      	str	r3, [r1, #0]
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
    1c10:	6013      	str	r3, [r2, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
}
    1c12:	b005      	add	sp, #20
    1c14:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1c18:	4770      	bx	lr
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
	
    if ( A2F060IFX_ID == idcode )
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
        fclk = *p_fclk;
    1c1a:	f64e 702c 	movw	r0, #61228	; 0xef2c
    1c1e:	f2c6 0001 	movt	r0, #24577	; 0x6001
    1c22:	6803      	ldr	r3, [r0, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
    1c24:	2b00      	cmp	r3, #0
    1c26:	d1cb      	bne.n	1bc0 <SystemCoreClockUpdate+0x9c>
    1c28:	e7c6      	b.n	1bb8 <SystemCoreClockUpdate+0x94>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
        uint32_t sysboot_version = *p_sysboot_version;
    1c2a:	f640 0540 	movw	r5, #2112	; 0x840
    1c2e:	f2c6 0508 	movt	r5, #24584	; 0x6008
    1c32:	682a      	ldr	r2, [r5, #0]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
    1c34:	f240 3100 	movw	r1, #768	; 0x300
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
        uint32_t sysboot_version = *p_sysboot_version;
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
    1c38:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
    1c3c:	f2c0 0101 	movt	r1, #1
    1c40:	428a      	cmp	r2, r1
    1c42:	d9b9      	bls.n	1bb8 <SystemCoreClockUpdate+0x94>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
    1c44:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
    1c48:	d207      	bcs.n	1c5a <SystemCoreClockUpdate+0x136>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
                fclk = *p_fclk;
    1c4a:	f241 662c 	movw	r6, #5676	; 0x162c
    1c4e:	f2c6 0608 	movt	r6, #24584	; 0x6008
    1c52:	6833      	ldr	r3, [r6, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
    1c54:	2b00      	cmp	r3, #0
    1c56:	d1b3      	bne.n	1bc0 <SystemCoreClockUpdate+0x9c>
    1c58:	e7ae      	b.n	1bb8 <SystemCoreClockUpdate+0x94>
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
                fclk = *p_fclk;
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
    1c5a:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
    1c5e:	d2ab      	bcs.n	1bb8 <SystemCoreClockUpdate+0x94>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
                fclk = *p_fclk;
    1c60:	f641 60ac 	movw	r0, #7852	; 0x1eac
    1c64:	f2c6 0008 	movt	r0, #24584	; 0x6008
    1c68:	6803      	ldr	r3, [r0, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d1a8      	bne.n	1bc0 <SystemCoreClockUpdate+0x9c>
    1c6e:	e7a3      	b.n	1bb8 <SystemCoreClockUpdate+0x94>

00001c70 <ace_init_convert>:

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
{
    1c70:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    1c72:	f240 0300 	movw	r3, #0
    1c76:	f2c4 0302 	movt	r3, #16386	; 0x4002
    ACE->PC2_CTRL = 0u;
    1c7a:	2200      	movs	r2, #0
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    1c7c:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
    ACE->PC2_CTRL = 0u;
    1c80:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1c84:	f893 1224 	ldrb.w	r1, [r3, #548]	; 0x224
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
    1c88:	f240 027c 	movw	r2, #124	; 0x7c
    1c8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1c90:	f3c1 0441 	ubfx	r4, r1, #1, #2
    1c94:	7014      	strb	r4, [r2, #0]
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1c96:	f893 0224 	ldrb.w	r0, [r3, #548]	; 0x224
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1c9a:	f240 0434 	movw	r4, #52	; 0x34
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
        channel_is_abps2 = abps_idx & 0x01u;
        if(channel_is_abps2)
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
    1c9e:	f3c0 1641 	ubfx	r6, r0, #5, #2
    1ca2:	7056      	strb	r6, [r2, #1]
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1ca4:	f893 7254 	ldrb.w	r7, [r3, #596]	; 0x254
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1ca8:	f2c2 0400 	movt	r4, #8192	; 0x2000
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
    1cac:	f3c7 0c41 	ubfx	ip, r7, #1, #2
    1cb0:	f882 c002 	strb.w	ip, [r2, #2]
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1cb4:	f893 1254 	ldrb.w	r1, [r3, #596]	; 0x254
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1cb8:	f894 c004 	ldrb.w	ip, [r4, #4]
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
        channel_is_abps2 = abps_idx & 0x01u;
        if(channel_is_abps2)
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
    1cbc:	f3c1 1041 	ubfx	r0, r1, #5, #2
    1cc0:	70d0      	strb	r0, [r2, #3]
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1cc2:	f893 6284 	ldrb.w	r6, [r3, #644]	; 0x284
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1cc6:	f242 6050 	movw	r0, #9808	; 0x2650
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
    1cca:	f3c6 0741 	ubfx	r7, r6, #1, #2
    1cce:	7117      	strb	r7, [r2, #4]
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1cd0:	f893 1284 	ldrb.w	r1, [r3, #644]	; 0x284
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1cd4:	f2c0 0000 	movt	r0, #0
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
        channel_is_abps2 = abps_idx & 0x01u;
        if(channel_is_abps2)
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
    1cd8:	f3c1 1641 	ubfx	r6, r1, #5, #2
    1cdc:	7156      	strb	r6, [r2, #5]
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1cde:	f893 72b4 	ldrb.w	r7, [r3, #692]	; 0x2b4
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1ce2:	f810 600c 	ldrb.w	r6, [r0, ip]
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
    1ce6:	f3c7 0141 	ubfx	r1, r7, #1, #2
    1cea:	7191      	strb	r1, [r2, #6]
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1cec:	f893 72b4 	ldrb.w	r7, [r3, #692]	; 0x2b4
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1cf0:	f242 6120 	movw	r1, #9760	; 0x2620
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
        channel_is_abps2 = abps_idx & 0x01u;
        if(channel_is_abps2)
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
    1cf4:	f3c7 1741 	ubfx	r7, r7, #5, #2
    1cf8:	71d7      	strb	r7, [r2, #7]
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1cfa:	f893 72e4 	ldrb.w	r7, [r3, #740]	; 0x2e4
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1cfe:	f2c0 0100 	movt	r1, #0
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
    1d02:	f3c7 0741 	ubfx	r7, r7, #1, #2
    1d06:	7217      	strb	r7, [r2, #8]
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    1d08:	f893 72e4 	ldrb.w	r7, [r3, #740]	; 0x2e4
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1d0c:	2e01      	cmp	r6, #1
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1d0e:	f811 300c 	ldrb.w	r3, [r1, ip]
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
        channel_is_abps2 = abps_idx & 0x01u;
        if(channel_is_abps2)
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
    1d12:	f3c7 1c41 	ubfx	ip, r7, #5, #2
    1d16:	f882 c009 	strb.w	ip, [r2, #9]
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1d1a:	f000 80b6 	beq.w	1e8a <ace_init_convert+0x21a>
    1d1e:	2e02      	cmp	r6, #2
    1d20:	f000 808b 	beq.w	1e3a <ace_init_convert+0x1ca>
                channel_type = VOLTAGE;
                break;
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
    1d24:	2600      	movs	r6, #0
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1d26:	7d22      	ldrb	r2, [r4, #20]
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1d28:	f240 0388 	movw	r3, #136	; 0x88
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1d2c:	f810 c002 	ldrb.w	ip, [r0, r2]
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1d34:	f1bc 0f01 	cmp.w	ip, #1
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1d38:	701e      	strb	r6, [r3, #0]
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1d3a:	5c8a      	ldrb	r2, [r1, r2]
        
        switch (channel_type_lut[channel_id])
    1d3c:	f000 8097 	beq.w	1e6e <ace_init_convert+0x1fe>
    1d40:	f1bc 0f02 	cmp.w	ip, #2
    1d44:	d055      	beq.n	1df2 <ace_init_convert+0x182>
                channel_type = VOLTAGE;
                break;
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
    1d46:	f04f 0c00 	mov.w	ip, #0
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1d4a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1d4e:	f883 c001 	strb.w	ip, [r3, #1]
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1d52:	f810 c002 	ldrb.w	ip, [r0, r2]
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1d56:	5c8a      	ldrb	r2, [r1, r2]
        
        switch (channel_type_lut[channel_id])
    1d58:	f1bc 0f01 	cmp.w	ip, #1
    1d5c:	d05f      	beq.n	1e1e <ace_init_convert+0x1ae>
    1d5e:	f1bc 0f02 	cmp.w	ip, #2
    1d62:	d023      	beq.n	1dac <ace_init_convert+0x13c>
                channel_type = VOLTAGE;
                break;
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
    1d64:	f04f 0c00 	mov.w	ip, #0
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1d68:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1d6c:	f883 c002 	strb.w	ip, [r3, #2]
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1d70:	5c80      	ldrb	r0, [r0, r2]
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1d72:	5c8a      	ldrb	r2, [r1, r2]
        
        switch (channel_type_lut[channel_id])
    1d74:	2801      	cmp	r0, #1
    1d76:	d02d      	beq.n	1dd4 <ace_init_convert+0x164>
    1d78:	2802      	cmp	r0, #2
    1d7a:	d009      	beq.n	1d90 <ace_init_convert+0x120>
                break;
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
                if ( acb_config_byte & 0x01u )
    1d7c:	2000      	movs	r0, #0
        
        channel_type_lut_h[channel] = channel_type;
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
    1d7e:	f240 0100 	movw	r1, #0
    1d82:	f2c4 0102 	movt	r1, #16386	; 0x4002
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1d86:	70d8      	strb	r0, [r3, #3]
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
    1d88:	f8c1 50c8 	str.w	r5, [r1, #200]	; 0xc8
}
    1d8c:	bcf0      	pop	{r4, r5, r6, r7}
    1d8e:	4770      	bx	lr
                }
                break;
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
    1d90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1d94:	f240 2128 	movw	r1, #552	; 0x228
    1d98:	0112      	lsls	r2, r2, #4
    1d9a:	f2c4 0102 	movt	r1, #16386	; 0x4002
    1d9e:	1851      	adds	r1, r2, r1
    1da0:	f891 c004 	ldrb.w	ip, [r1, #4]
                if ( acb_config_byte & 0x01u )
    1da4:	f01c 0f01 	tst.w	ip, #1
    1da8:	d0e9      	beq.n	1d7e <ace_init_convert+0x10e>
    1daa:	e7e7      	b.n	1d7c <ace_init_convert+0x10c>
                }
                break;
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
    1dac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1db0:	f240 2628 	movw	r6, #552	; 0x228
    1db4:	0112      	lsls	r2, r2, #4
    1db6:	f2c4 0602 	movt	r6, #16386	; 0x4002
    1dba:	1996      	adds	r6, r2, r6
    1dbc:	7932      	ldrb	r2, [r6, #4]
                if ( acb_config_byte & 0x01u )
    1dbe:	f012 0f01 	tst.w	r2, #1
    1dc2:	d1cf      	bne.n	1d64 <ace_init_convert+0xf4>
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1dc4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1dc8:	f883 c002 	strb.w	ip, [r3, #2]
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1dcc:	5c80      	ldrb	r0, [r0, r2]
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1dce:	5c8a      	ldrb	r2, [r1, r2]
        
        switch (channel_type_lut[channel_id])
    1dd0:	2801      	cmp	r0, #1
    1dd2:	d1d1      	bne.n	1d78 <ace_init_convert+0x108>
                channel_type = VOLTAGE;
                break;
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
    1dd4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1dd8:	f240 2020 	movw	r0, #544	; 0x220
    1ddc:	f2c4 0002 	movt	r0, #16386	; 0x4002
    1de0:	010a      	lsls	r2, r1, #4
    1de2:	1811      	adds	r1, r2, r0
    1de4:	f891 c008 	ldrb.w	ip, [r1, #8]
    1de8:	f08c 0001 	eor.w	r0, ip, #1
    1dec:	f000 0001 	and.w	r0, r0, #1
    1df0:	e7c5      	b.n	1d7e <ace_init_convert+0x10e>
                }
                break;
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
    1df2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1df6:	f240 2628 	movw	r6, #552	; 0x228
    1dfa:	0112      	lsls	r2, r2, #4
    1dfc:	f2c4 0602 	movt	r6, #16386	; 0x4002
    1e00:	1996      	adds	r6, r2, r6
    1e02:	7932      	ldrb	r2, [r6, #4]
                if ( acb_config_byte & 0x01u )
    1e04:	f012 0f01 	tst.w	r2, #1
    1e08:	d19d      	bne.n	1d46 <ace_init_convert+0xd6>
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1e0a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1e0e:	f883 c001 	strb.w	ip, [r3, #1]
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1e12:	f810 c002 	ldrb.w	ip, [r0, r2]
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1e16:	5c8a      	ldrb	r2, [r1, r2]
        
        switch (channel_type_lut[channel_id])
    1e18:	f1bc 0f01 	cmp.w	ip, #1
    1e1c:	d19f      	bne.n	1d5e <ace_init_convert+0xee>
                channel_type = VOLTAGE;
                break;
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
    1e1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1e22:	f240 2620 	movw	r6, #544	; 0x220
    1e26:	0112      	lsls	r2, r2, #4
    1e28:	f2c4 0602 	movt	r6, #16386	; 0x4002
    1e2c:	1996      	adds	r6, r2, r6
    1e2e:	7a32      	ldrb	r2, [r6, #8]
    1e30:	f082 0c01 	eor.w	ip, r2, #1
    1e34:	f00c 0c01 	and.w	ip, ip, #1
    1e38:	e796      	b.n	1d68 <ace_init_convert+0xf8>
                }
                break;
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
    1e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1e3e:	f240 2228 	movw	r2, #552	; 0x228
    1e42:	011b      	lsls	r3, r3, #4
    1e44:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1e48:	189a      	adds	r2, r3, r2
    1e4a:	7913      	ldrb	r3, [r2, #4]
                if ( acb_config_byte & 0x01u )
    1e4c:	f013 0f01 	tst.w	r3, #1
    1e50:	f47f af68 	bne.w	1d24 <ace_init_convert+0xb4>
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1e54:	7d22      	ldrb	r2, [r4, #20]
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1e56:	f240 0388 	movw	r3, #136	; 0x88
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1e5a:	f810 c002 	ldrb.w	ip, [r0, r2]
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
        
        switch (channel_type_lut[channel_id])
    1e62:	f1bc 0f01 	cmp.w	ip, #1
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    1e66:	701e      	strb	r6, [r3, #0]
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
    1e68:	5c8a      	ldrb	r2, [r1, r2]
        
        switch (channel_type_lut[channel_id])
    1e6a:	f47f af69 	bne.w	1d40 <ace_init_convert+0xd0>
                channel_type = VOLTAGE;
                break;
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
    1e6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1e72:	f240 2620 	movw	r6, #544	; 0x220
    1e76:	0112      	lsls	r2, r2, #4
    1e78:	f2c4 0602 	movt	r6, #16386	; 0x4002
    1e7c:	1996      	adds	r6, r2, r6
    1e7e:	7a32      	ldrb	r2, [r6, #8]
    1e80:	f082 0c01 	eor.w	ip, r2, #1
    1e84:	f00c 0c01 	and.w	ip, ip, #1
    1e88:	e75f      	b.n	1d4a <ace_init_convert+0xda>
    1e8a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1e8e:	f240 2620 	movw	r6, #544	; 0x220
    1e92:	f2c4 0602 	movt	r6, #16386	; 0x4002
    1e96:	0113      	lsls	r3, r2, #4
    1e98:	199a      	adds	r2, r3, r6
    1e9a:	7a16      	ldrb	r6, [r2, #8]
    1e9c:	f086 0c01 	eor.w	ip, r6, #1
    1ea0:	f00c 0601 	and.w	r6, ip, #1
    1ea4:	e73f      	b.n	1d26 <ace_init_convert+0xb6>
    1ea6:	bf00      	nop

00001ea8 <ace_init_flags>:
        }
        
        g_ppe_global_flags_isr = 0u;
    }
#endif
}
    1ea8:	4770      	bx	lr
    1eaa:	bf00      	nop

00001eac <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
    1eac:	4668      	mov	r0, sp
    1eae:	f020 0107 	bic.w	r1, r0, #7
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1eb2:	f24e 1300 	movw	r3, #57600	; 0xe100
    1eb6:	468d      	mov	sp, r1
    1eb8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1ebc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    1ec0:	b401      	push	{r0}
    1ec2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG0 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
}
    1ec6:	bc01      	pop	{r0}
    1ec8:	4685      	mov	sp, r0
    1eca:	4770      	bx	lr

00001ecc <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
    1ecc:	4668      	mov	r0, sp
    1ece:	f020 0107 	bic.w	r1, r0, #7
    1ed2:	f24e 1300 	movw	r3, #57600	; 0xe100
    1ed6:	468d      	mov	sp, r1
    1ed8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1edc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    1ee0:	b401      	push	{r0}
    1ee2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG1 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
}
    1ee6:	bc01      	pop	{r0}
    1ee8:	4685      	mov	sp, r0
    1eea:	4770      	bx	lr

00001eec <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
    1eec:	4668      	mov	r0, sp
    1eee:	f020 0107 	bic.w	r1, r0, #7
    1ef2:	f24e 1300 	movw	r3, #57600	; 0xe100
    1ef6:	468d      	mov	sp, r1
    1ef8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1f00:	b401      	push	{r0}
    1f02:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG2 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
}
    1f06:	bc01      	pop	{r0}
    1f08:	4685      	mov	sp, r0
    1f0a:	4770      	bx	lr

00001f0c <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
    1f0c:	4668      	mov	r0, sp
    1f0e:	f020 0107 	bic.w	r1, r0, #7
    1f12:	f24e 1300 	movw	r3, #57600	; 0xe100
    1f16:	468d      	mov	sp, r1
    1f18:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    1f20:	b401      	push	{r0}
    1f22:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG3 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
}
    1f26:	bc01      	pop	{r0}
    1f28:	4685      	mov	sp, r0
    1f2a:	4770      	bx	lr

00001f2c <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
    1f2c:	4668      	mov	r0, sp
    1f2e:	f020 0107 	bic.w	r1, r0, #7
    1f32:	f24e 1300 	movw	r3, #57600	; 0xe100
    1f36:	468d      	mov	sp, r1
    1f38:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1f3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1f40:	b401      	push	{r0}
    1f42:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG4 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
}
    1f46:	bc01      	pop	{r0}
    1f48:	4685      	mov	sp, r0
    1f4a:	4770      	bx	lr

00001f4c <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
    1f4c:	4668      	mov	r0, sp
    1f4e:	f020 0107 	bic.w	r1, r0, #7
    1f52:	f24e 1300 	movw	r3, #57600	; 0xe100
    1f56:	468d      	mov	sp, r1
    1f58:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1f5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1f60:	b401      	push	{r0}
    1f62:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG5 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
}
    1f66:	bc01      	pop	{r0}
    1f68:	4685      	mov	sp, r0
    1f6a:	4770      	bx	lr

00001f6c <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
    1f6c:	4668      	mov	r0, sp
    1f6e:	f020 0107 	bic.w	r1, r0, #7
    1f72:	f24e 1300 	movw	r3, #57600	; 0xe100
    1f76:	468d      	mov	sp, r1
    1f78:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1f80:	b401      	push	{r0}
    1f82:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG6 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
}
    1f86:	bc01      	pop	{r0}
    1f88:	4685      	mov	sp, r0
    1f8a:	4770      	bx	lr

00001f8c <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
    1f8c:	4668      	mov	r0, sp
    1f8e:	f020 0107 	bic.w	r1, r0, #7
    1f92:	f24e 1300 	movw	r3, #57600	; 0xe100
    1f96:	468d      	mov	sp, r1
    1f98:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1f9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    1fa0:	b401      	push	{r0}
    1fa2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG7 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
}
    1fa6:	bc01      	pop	{r0}
    1fa8:	4685      	mov	sp, r0
    1faa:	4770      	bx	lr

00001fac <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
    1fac:	4668      	mov	r0, sp
    1fae:	f020 0107 	bic.w	r1, r0, #7
    1fb2:	f24e 1300 	movw	r3, #57600	; 0xe100
    1fb6:	468d      	mov	sp, r1
    1fb8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1fc0:	b401      	push	{r0}
    1fc2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG8 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
}
    1fc6:	bc01      	pop	{r0}
    1fc8:	4685      	mov	sp, r0
    1fca:	4770      	bx	lr

00001fcc <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
    1fcc:	4668      	mov	r0, sp
    1fce:	f020 0107 	bic.w	r1, r0, #7
    1fd2:	f24e 1300 	movw	r3, #57600	; 0xe100
    1fd6:	468d      	mov	sp, r1
    1fd8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1fdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1fe0:	b401      	push	{r0}
    1fe2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG9 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
}
    1fe6:	bc01      	pop	{r0}
    1fe8:	4685      	mov	sp, r0
    1fea:	4770      	bx	lr

00001fec <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
    1fec:	4668      	mov	r0, sp
    1fee:	f020 0107 	bic.w	r1, r0, #7
    1ff2:	f24e 1300 	movw	r3, #57600	; 0xe100
    1ff6:	468d      	mov	sp, r1
    1ff8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1ffc:	2201      	movs	r2, #1
    1ffe:	b401      	push	{r0}
    2000:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG10 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
}
    2004:	bc01      	pop	{r0}
    2006:	4685      	mov	sp, r0
    2008:	4770      	bx	lr
    200a:	bf00      	nop

0000200c <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
    200c:	4668      	mov	r0, sp
    200e:	f020 0107 	bic.w	r1, r0, #7
    2012:	f24e 1300 	movw	r3, #57600	; 0xe100
    2016:	468d      	mov	sp, r1
    2018:	f2ce 0300 	movt	r3, #57344	; 0xe000
    201c:	2202      	movs	r2, #2
    201e:	b401      	push	{r0}
    2020:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG11 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
}
    2024:	bc01      	pop	{r0}
    2026:	4685      	mov	sp, r0
    2028:	4770      	bx	lr
    202a:	bf00      	nop

0000202c <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
    202c:	4668      	mov	r0, sp
    202e:	f020 0107 	bic.w	r1, r0, #7
    2032:	f24e 1300 	movw	r3, #57600	; 0xe100
    2036:	468d      	mov	sp, r1
    2038:	f2ce 0300 	movt	r3, #57344	; 0xe000
    203c:	2204      	movs	r2, #4
    203e:	b401      	push	{r0}
    2040:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG12 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
}
    2044:	bc01      	pop	{r0}
    2046:	4685      	mov	sp, r0
    2048:	4770      	bx	lr
    204a:	bf00      	nop

0000204c <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
    204c:	4668      	mov	r0, sp
    204e:	f020 0107 	bic.w	r1, r0, #7
    2052:	f24e 1300 	movw	r3, #57600	; 0xe100
    2056:	468d      	mov	sp, r1
    2058:	f2ce 0300 	movt	r3, #57344	; 0xe000
    205c:	2208      	movs	r2, #8
    205e:	b401      	push	{r0}
    2060:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG13 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
}
    2064:	bc01      	pop	{r0}
    2066:	4685      	mov	sp, r0
    2068:	4770      	bx	lr
    206a:	bf00      	nop

0000206c <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
    206c:	4668      	mov	r0, sp
    206e:	f020 0107 	bic.w	r1, r0, #7
    2072:	f24e 1300 	movw	r3, #57600	; 0xe100
    2076:	468d      	mov	sp, r1
    2078:	f2ce 0300 	movt	r3, #57344	; 0xe000
    207c:	2210      	movs	r2, #16
    207e:	b401      	push	{r0}
    2080:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG14 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
}
    2084:	bc01      	pop	{r0}
    2086:	4685      	mov	sp, r0
    2088:	4770      	bx	lr
    208a:	bf00      	nop

0000208c <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
    208c:	4668      	mov	r0, sp
    208e:	f020 0107 	bic.w	r1, r0, #7
    2092:	f24e 1300 	movw	r3, #57600	; 0xe100
    2096:	468d      	mov	sp, r1
    2098:	f2ce 0300 	movt	r3, #57344	; 0xe000
    209c:	2220      	movs	r2, #32
    209e:	b401      	push	{r0}
    20a0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG15 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
}
    20a4:	bc01      	pop	{r0}
    20a6:	4685      	mov	sp, r0
    20a8:	4770      	bx	lr
    20aa:	bf00      	nop

000020ac <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
    20ac:	4668      	mov	r0, sp
    20ae:	f020 0107 	bic.w	r1, r0, #7
    20b2:	f24e 1300 	movw	r3, #57600	; 0xe100
    20b6:	468d      	mov	sp, r1
    20b8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    20bc:	2240      	movs	r2, #64	; 0x40
    20be:	b401      	push	{r0}
    20c0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG16 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
}
    20c4:	bc01      	pop	{r0}
    20c6:	4685      	mov	sp, r0
    20c8:	4770      	bx	lr
    20ca:	bf00      	nop

000020cc <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
    20cc:	4668      	mov	r0, sp
    20ce:	f020 0107 	bic.w	r1, r0, #7
    20d2:	f24e 1300 	movw	r3, #57600	; 0xe100
    20d6:	468d      	mov	sp, r1
    20d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    20dc:	2280      	movs	r2, #128	; 0x80
    20de:	b401      	push	{r0}
    20e0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG17 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
}
    20e4:	bc01      	pop	{r0}
    20e6:	4685      	mov	sp, r0
    20e8:	4770      	bx	lr
    20ea:	bf00      	nop

000020ec <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
    20ec:	4668      	mov	r0, sp
    20ee:	f020 0107 	bic.w	r1, r0, #7
    20f2:	f24e 1300 	movw	r3, #57600	; 0xe100
    20f6:	468d      	mov	sp, r1
    20f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    20fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    2100:	b401      	push	{r0}
    2102:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG18 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
}
    2106:	bc01      	pop	{r0}
    2108:	4685      	mov	sp, r0
    210a:	4770      	bx	lr

0000210c <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
    210c:	4668      	mov	r0, sp
    210e:	f020 0107 	bic.w	r1, r0, #7
    2112:	f24e 1300 	movw	r3, #57600	; 0xe100
    2116:	468d      	mov	sp, r1
    2118:	f2ce 0300 	movt	r3, #57344	; 0xe000
    211c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2120:	b401      	push	{r0}
    2122:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG19 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
}
    2126:	bc01      	pop	{r0}
    2128:	4685      	mov	sp, r0
    212a:	4770      	bx	lr

0000212c <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
    212c:	4668      	mov	r0, sp
    212e:	f020 0107 	bic.w	r1, r0, #7
    2132:	f24e 1300 	movw	r3, #57600	; 0xe100
    2136:	468d      	mov	sp, r1
    2138:	f2ce 0300 	movt	r3, #57344	; 0xe000
    213c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2140:	b401      	push	{r0}
    2142:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG20 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
}
    2146:	bc01      	pop	{r0}
    2148:	4685      	mov	sp, r0
    214a:	4770      	bx	lr

0000214c <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
    214c:	4668      	mov	r0, sp
    214e:	f020 0107 	bic.w	r1, r0, #7
    2152:	f24e 1300 	movw	r3, #57600	; 0xe100
    2156:	468d      	mov	sp, r1
    2158:	f2ce 0300 	movt	r3, #57344	; 0xe000
    215c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2160:	b401      	push	{r0}
    2162:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG21 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
}
    2166:	bc01      	pop	{r0}
    2168:	4685      	mov	sp, r0
    216a:	4770      	bx	lr

0000216c <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
    216c:	4668      	mov	r0, sp
    216e:	f020 0107 	bic.w	r1, r0, #7
    2172:	f24e 1300 	movw	r3, #57600	; 0xe100
    2176:	468d      	mov	sp, r1
    2178:	f2ce 0300 	movt	r3, #57344	; 0xe000
    217c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2180:	b401      	push	{r0}
    2182:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG22 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
}
    2186:	bc01      	pop	{r0}
    2188:	4685      	mov	sp, r0
    218a:	4770      	bx	lr

0000218c <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
    218c:	4668      	mov	r0, sp
    218e:	f020 0107 	bic.w	r1, r0, #7
    2192:	f24e 1300 	movw	r3, #57600	; 0xe100
    2196:	468d      	mov	sp, r1
    2198:	f2ce 0300 	movt	r3, #57344	; 0xe000
    219c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    21a0:	b401      	push	{r0}
    21a2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG23 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
}
    21a6:	bc01      	pop	{r0}
    21a8:	4685      	mov	sp, r0
    21aa:	4770      	bx	lr

000021ac <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
    21ac:	4668      	mov	r0, sp
    21ae:	f020 0107 	bic.w	r1, r0, #7
    21b2:	f24e 1300 	movw	r3, #57600	; 0xe100
    21b6:	468d      	mov	sp, r1
    21b8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    21bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    21c0:	b401      	push	{r0}
    21c2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG24 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
}
    21c6:	bc01      	pop	{r0}
    21c8:	4685      	mov	sp, r0
    21ca:	4770      	bx	lr

000021cc <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
    21cc:	4668      	mov	r0, sp
    21ce:	f020 0107 	bic.w	r1, r0, #7
    21d2:	f24e 1300 	movw	r3, #57600	; 0xe100
    21d6:	468d      	mov	sp, r1
    21d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    21dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    21e0:	b401      	push	{r0}
    21e2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG25 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
}
    21e6:	bc01      	pop	{r0}
    21e8:	4685      	mov	sp, r0
    21ea:	4770      	bx	lr

000021ec <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
    21ec:	4668      	mov	r0, sp
    21ee:	f020 0107 	bic.w	r1, r0, #7
    21f2:	f24e 1300 	movw	r3, #57600	; 0xe100
    21f6:	468d      	mov	sp, r1
    21f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    21fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2200:	b401      	push	{r0}
    2202:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG26 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
}
    2206:	bc01      	pop	{r0}
    2208:	4685      	mov	sp, r0
    220a:	4770      	bx	lr

0000220c <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
    220c:	4668      	mov	r0, sp
    220e:	f020 0107 	bic.w	r1, r0, #7
    2212:	f24e 1300 	movw	r3, #57600	; 0xe100
    2216:	468d      	mov	sp, r1
    2218:	f2ce 0300 	movt	r3, #57344	; 0xe000
    221c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2220:	b401      	push	{r0}
    2222:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG27 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
}
    2226:	bc01      	pop	{r0}
    2228:	4685      	mov	sp, r0
    222a:	4770      	bx	lr

0000222c <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
    222c:	4668      	mov	r0, sp
    222e:	f020 0107 	bic.w	r1, r0, #7
    2232:	f24e 1300 	movw	r3, #57600	; 0xe100
    2236:	468d      	mov	sp, r1
    2238:	f2ce 0300 	movt	r3, #57344	; 0xe000
    223c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    2240:	b401      	push	{r0}
    2242:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG28 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
}
    2246:	bc01      	pop	{r0}
    2248:	4685      	mov	sp, r0
    224a:	4770      	bx	lr

0000224c <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
    224c:	4668      	mov	r0, sp
    224e:	f020 0107 	bic.w	r1, r0, #7
    2252:	f24e 1300 	movw	r3, #57600	; 0xe100
    2256:	468d      	mov	sp, r1
    2258:	f2ce 0300 	movt	r3, #57344	; 0xe000
    225c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2260:	b401      	push	{r0}
    2262:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG29 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
}
    2266:	bc01      	pop	{r0}
    2268:	4685      	mov	sp, r0
    226a:	4770      	bx	lr

0000226c <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
    226c:	4668      	mov	r0, sp
    226e:	f020 0107 	bic.w	r1, r0, #7
    2272:	f24e 1300 	movw	r3, #57600	; 0xe100
    2276:	468d      	mov	sp, r1
    2278:	f2ce 0300 	movt	r3, #57344	; 0xe000
    227c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2280:	b401      	push	{r0}
    2282:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG30 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
}
    2286:	bc01      	pop	{r0}
    2288:	4685      	mov	sp, r0
    228a:	4770      	bx	lr

0000228c <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
    228c:	4668      	mov	r0, sp
    228e:	f020 0107 	bic.w	r1, r0, #7
    2292:	f24e 1300 	movw	r3, #57600	; 0xe100
    2296:	468d      	mov	sp, r1
    2298:	f2ce 0300 	movt	r3, #57344	; 0xe000
    229c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    22a0:	b401      	push	{r0}
    22a2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG31 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
}
    22a6:	bc01      	pop	{r0}
    22a8:	4685      	mov	sp, r0
    22aa:	4770      	bx	lr

000022ac <__libc_init_array>:
    22ac:	b570      	push	{r4, r5, r6, lr}
    22ae:	f242 6698 	movw	r6, #9880	; 0x2698
    22b2:	f242 6598 	movw	r5, #9880	; 0x2698
    22b6:	f2c0 0600 	movt	r6, #0
    22ba:	f2c0 0500 	movt	r5, #0
    22be:	1b76      	subs	r6, r6, r5
    22c0:	10b6      	asrs	r6, r6, #2
    22c2:	d006      	beq.n	22d2 <__libc_init_array+0x26>
    22c4:	2400      	movs	r4, #0
    22c6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    22ca:	3401      	adds	r4, #1
    22cc:	4798      	blx	r3
    22ce:	42a6      	cmp	r6, r4
    22d0:	d8f9      	bhi.n	22c6 <__libc_init_array+0x1a>
    22d2:	f242 6598 	movw	r5, #9880	; 0x2698
    22d6:	f242 669c 	movw	r6, #9884	; 0x269c
    22da:	f2c0 0500 	movt	r5, #0
    22de:	f2c0 0600 	movt	r6, #0
    22e2:	1b76      	subs	r6, r6, r5
    22e4:	f000 f9cc 	bl	2680 <_init>
    22e8:	10b6      	asrs	r6, r6, #2
    22ea:	d006      	beq.n	22fa <__libc_init_array+0x4e>
    22ec:	2400      	movs	r4, #0
    22ee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    22f2:	3401      	adds	r4, #1
    22f4:	4798      	blx	r3
    22f6:	42a6      	cmp	r6, r4
    22f8:	d8f9      	bhi.n	22ee <__libc_init_array+0x42>
    22fa:	bd70      	pop	{r4, r5, r6, pc}

000022fc <memset>:
    22fc:	2a03      	cmp	r2, #3
    22fe:	b2c9      	uxtb	r1, r1
    2300:	b430      	push	{r4, r5}
    2302:	d807      	bhi.n	2314 <memset+0x18>
    2304:	b122      	cbz	r2, 2310 <memset+0x14>
    2306:	2300      	movs	r3, #0
    2308:	54c1      	strb	r1, [r0, r3]
    230a:	3301      	adds	r3, #1
    230c:	4293      	cmp	r3, r2
    230e:	d1fb      	bne.n	2308 <memset+0xc>
    2310:	bc30      	pop	{r4, r5}
    2312:	4770      	bx	lr
    2314:	eb00 0c02 	add.w	ip, r0, r2
    2318:	4603      	mov	r3, r0
    231a:	e001      	b.n	2320 <memset+0x24>
    231c:	f803 1c01 	strb.w	r1, [r3, #-1]
    2320:	f003 0403 	and.w	r4, r3, #3
    2324:	461a      	mov	r2, r3
    2326:	3301      	adds	r3, #1
    2328:	2c00      	cmp	r4, #0
    232a:	d1f7      	bne.n	231c <memset+0x20>
    232c:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    2330:	ebc2 040c 	rsb	r4, r2, ip
    2334:	fb03 f301 	mul.w	r3, r3, r1
    2338:	e01f      	b.n	237a <memset+0x7e>
    233a:	f842 3c40 	str.w	r3, [r2, #-64]
    233e:	f842 3c3c 	str.w	r3, [r2, #-60]
    2342:	f842 3c38 	str.w	r3, [r2, #-56]
    2346:	f842 3c34 	str.w	r3, [r2, #-52]
    234a:	f842 3c30 	str.w	r3, [r2, #-48]
    234e:	f842 3c2c 	str.w	r3, [r2, #-44]
    2352:	f842 3c28 	str.w	r3, [r2, #-40]
    2356:	f842 3c24 	str.w	r3, [r2, #-36]
    235a:	f842 3c20 	str.w	r3, [r2, #-32]
    235e:	f842 3c1c 	str.w	r3, [r2, #-28]
    2362:	f842 3c18 	str.w	r3, [r2, #-24]
    2366:	f842 3c14 	str.w	r3, [r2, #-20]
    236a:	f842 3c10 	str.w	r3, [r2, #-16]
    236e:	f842 3c0c 	str.w	r3, [r2, #-12]
    2372:	f842 3c08 	str.w	r3, [r2, #-8]
    2376:	f842 3c04 	str.w	r3, [r2, #-4]
    237a:	4615      	mov	r5, r2
    237c:	3240      	adds	r2, #64	; 0x40
    237e:	2c3f      	cmp	r4, #63	; 0x3f
    2380:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
    2384:	dcd9      	bgt.n	233a <memset+0x3e>
    2386:	462a      	mov	r2, r5
    2388:	ebc5 040c 	rsb	r4, r5, ip
    238c:	e007      	b.n	239e <memset+0xa2>
    238e:	f842 3c10 	str.w	r3, [r2, #-16]
    2392:	f842 3c0c 	str.w	r3, [r2, #-12]
    2396:	f842 3c08 	str.w	r3, [r2, #-8]
    239a:	f842 3c04 	str.w	r3, [r2, #-4]
    239e:	4615      	mov	r5, r2
    23a0:	3210      	adds	r2, #16
    23a2:	2c0f      	cmp	r4, #15
    23a4:	f1a4 0410 	sub.w	r4, r4, #16
    23a8:	dcf1      	bgt.n	238e <memset+0x92>
    23aa:	462a      	mov	r2, r5
    23ac:	ebc5 050c 	rsb	r5, r5, ip
    23b0:	e001      	b.n	23b6 <memset+0xba>
    23b2:	f842 3c04 	str.w	r3, [r2, #-4]
    23b6:	4614      	mov	r4, r2
    23b8:	3204      	adds	r2, #4
    23ba:	2d03      	cmp	r5, #3
    23bc:	f1a5 0504 	sub.w	r5, r5, #4
    23c0:	dcf7      	bgt.n	23b2 <memset+0xb6>
    23c2:	e001      	b.n	23c8 <memset+0xcc>
    23c4:	f804 1b01 	strb.w	r1, [r4], #1
    23c8:	4564      	cmp	r4, ip
    23ca:	d3fb      	bcc.n	23c4 <memset+0xc8>
    23cc:	e7a0      	b.n	2310 <memset+0x14>
    23ce:	bf00      	nop

000023d0 <strncmp>:
    23d0:	b430      	push	{r4, r5}
    23d2:	4613      	mov	r3, r2
    23d4:	2a00      	cmp	r2, #0
    23d6:	d043      	beq.n	2460 <strncmp+0x90>
    23d8:	ea41 0200 	orr.w	r2, r1, r0
    23dc:	f012 0f03 	tst.w	r2, #3
    23e0:	d125      	bne.n	242e <strncmp+0x5e>
    23e2:	2b03      	cmp	r3, #3
    23e4:	4604      	mov	r4, r0
    23e6:	460d      	mov	r5, r1
    23e8:	d93d      	bls.n	2466 <strncmp+0x96>
    23ea:	6802      	ldr	r2, [r0, #0]
    23ec:	6809      	ldr	r1, [r1, #0]
    23ee:	428a      	cmp	r2, r1
    23f0:	d139      	bne.n	2466 <strncmp+0x96>
    23f2:	3b04      	subs	r3, #4
    23f4:	d034      	beq.n	2460 <strncmp+0x90>
    23f6:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
    23fa:	ea21 0202 	bic.w	r2, r1, r2
    23fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    2402:	d00d      	beq.n	2420 <strncmp+0x50>
    2404:	e02c      	b.n	2460 <strncmp+0x90>
    2406:	6822      	ldr	r2, [r4, #0]
    2408:	6829      	ldr	r1, [r5, #0]
    240a:	f1a2 3001 	sub.w	r0, r2, #16843009	; 0x1010101
    240e:	428a      	cmp	r2, r1
    2410:	ea20 0002 	bic.w	r0, r0, r2
    2414:	d127      	bne.n	2466 <strncmp+0x96>
    2416:	3b04      	subs	r3, #4
    2418:	d022      	beq.n	2460 <strncmp+0x90>
    241a:	f010 3f80 	tst.w	r0, #2155905152	; 0x80808080
    241e:	d11f      	bne.n	2460 <strncmp+0x90>
    2420:	3404      	adds	r4, #4
    2422:	3504      	adds	r5, #4
    2424:	2b03      	cmp	r3, #3
    2426:	d8ee      	bhi.n	2406 <strncmp+0x36>
    2428:	4620      	mov	r0, r4
    242a:	4629      	mov	r1, r5
    242c:	b1f3      	cbz	r3, 246c <strncmp+0x9c>
    242e:	7804      	ldrb	r4, [r0, #0]
    2430:	3b01      	subs	r3, #1
    2432:	f891 c000 	ldrb.w	ip, [r1]
    2436:	4564      	cmp	r4, ip
    2438:	d10f      	bne.n	245a <strncmp+0x8a>
    243a:	b18b      	cbz	r3, 2460 <strncmp+0x90>
    243c:	b184      	cbz	r4, 2460 <strncmp+0x90>
    243e:	3b01      	subs	r3, #1
    2440:	2200      	movs	r2, #0
    2442:	e002      	b.n	244a <strncmp+0x7a>
    2444:	b163      	cbz	r3, 2460 <strncmp+0x90>
    2446:	b15c      	cbz	r4, 2460 <strncmp+0x90>
    2448:	3b01      	subs	r3, #1
    244a:	1884      	adds	r4, r0, r2
    244c:	188d      	adds	r5, r1, r2
    244e:	3201      	adds	r2, #1
    2450:	7864      	ldrb	r4, [r4, #1]
    2452:	f895 c001 	ldrb.w	ip, [r5, #1]
    2456:	4564      	cmp	r4, ip
    2458:	d0f4      	beq.n	2444 <strncmp+0x74>
    245a:	ebcc 0004 	rsb	r0, ip, r4
    245e:	e000      	b.n	2462 <strncmp+0x92>
    2460:	2000      	movs	r0, #0
    2462:	bc30      	pop	{r4, r5}
    2464:	4770      	bx	lr
    2466:	4620      	mov	r0, r4
    2468:	4629      	mov	r1, r5
    246a:	e7e0      	b.n	242e <strncmp+0x5e>
    246c:	7824      	ldrb	r4, [r4, #0]
    246e:	f895 c000 	ldrb.w	ip, [r5]
    2472:	ebcc 0004 	rsb	r0, ip, r4
    2476:	e7f4      	b.n	2462 <strncmp+0x92>

00002478 <C.37.4212>:
    2478:	0080 0000 0042 0000 0000 0000 0000 0000     ....B...........
	...

0000249c <C.36.4211>:
    249c:	0080 0000 0042 0000 0000 0000 00ff 0000     ....B...........
    24ac:	00ff 0000 4441 4443 7269 6365 4974 706e     ....ADCDirectInp
    24bc:	7475 325f 0000 0000 4441 4443 7269 6365     ut_2....ADCDirec
    24cc:	4974 706e 7475 335f 0000 0000 4441 4443     tInput_3....ADCD
    24dc:	7269 6365 4974 706e 7475 345f 0000 0000     irectInput_4....
    24ec:	4441 4443 7269 6365 4974 706e 7475 355f     ADCDirectInput_5
    24fc:	0000 0000                                   ....

00002500 <g_gpio_irqn_lut>:
    2500:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
    2510:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
    2520:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
    2530:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

00002540 <g_config_reg_lut>:
    2540:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
    2550:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
    2560:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
    2570:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
    2580:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
    2590:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
    25a0:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
    25b0:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

000025c0 <C.16.2565>:
    25c0:	0001 0000 0002 0000 0004 0000 0001 0000     ................

000025d0 <g_ace_channel_2_name>:
    25d0:	4441 4443 7269 6365 4974 706e 7475 345f     ADCDirectInput_4
    25e0:	0000 0000                                   ....

000025e4 <g_ace_channel_1_name>:
    25e4:	4441 4443 7269 6365 4974 706e 7475 335f     ADCDirectInput_3
    25f4:	0000 0000                                   ....

000025f8 <g_ace_channel_0_name>:
    25f8:	4441 4443 7269 6365 4974 706e 7475 325f     ADCDirectInput_2
    2608:	0000 0000                                   ....

0000260c <g_ace_channel_3_name>:
    260c:	4441 4443 7269 6365 4974 706e 7475 355f     ADCDirectInput_5
    261c:	0000 0000                                   ....

00002620 <channel_quad_lut>:
    2620:	00ff 0000 0100 0101 ff01 ffff ffff ffff     ................
    2630:	02ff 0202 0302 0303 ff03 ffff ffff ffff     ................
    2640:	04ff 0404 ff04 ffff ffff ffff ffff ffff     ................

00002650 <channel_type_lut>:
    2650:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
    2660:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
    2670:	0000 0100 ff02 ffff 00ff 0000 ff00 00ff     ................

00002680 <_init>:
    2680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2682:	bf00      	nop
    2684:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2686:	bc08      	pop	{r3}
    2688:	469e      	mov	lr, r3
    268a:	4770      	bx	lr

0000268c <_fini>:
    268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    268e:	bf00      	nop
    2690:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2692:	bc08      	pop	{r3}
    2694:	469e      	mov	lr, r3
    2696:	4770      	bx	lr

00002698 <__frame_dummy_init_array_entry>:
    2698:	0485 0000                                   ....

0000269c <__do_global_dtors_aux_fini_array_entry>:
    269c:	0471 0000                                   q...
